[{"D:\\frontend\\Projects\\picully\\src\\components\\forms\\SignIn.js":"1","D:\\frontend\\Projects\\picully\\src\\App.js":"2","D:\\frontend\\Projects\\picully\\src\\index.js":"3","D:\\frontend\\Projects\\picully\\src\\contexts\\AuthContext.js":"4","D:\\frontend\\Projects\\picully\\src\\config\\firebase.js":"5","D:\\frontend\\Projects\\picully\\src\\contexts\\FirebaseContext.js":"6","D:\\frontend\\Projects\\picully\\src\\reportWebVitals.js":"7","D:\\frontend\\Projects\\picully\\src\\components\\forms\\SignUp.js":"8","D:\\frontend\\Projects\\picully\\src\\views\\Home.js":"9","D:\\frontend\\Projects\\picully\\src\\components\\console\\Console.js":"10","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavBar.js":"11","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavMobile.js":"12","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavIndex.js":"13","D:\\frontend\\Projects\\picully\\src\\components\\Welcome.js":"14","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavMobileSignedIn.js":"15","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavBarSignedIn.js":"16","D:\\frontend\\Projects\\picully\\src\\components\\Hero\\WelcomeBanner.js":"17","D:\\frontend\\Projects\\picully\\src\\contexts\\UpdateContext.js":"18","D:\\frontend\\Projects\\picully\\src\\views\\About.js":"19","D:\\frontend\\Projects\\picully\\src\\components\\AuthRoute.js":"20","D:\\frontend\\Projects\\picully\\src\\components\\console\\imageData.js":"21","D:\\frontend\\Projects\\picully\\src\\hooks\\useAlbums.js":"22","D:\\frontend\\Projects\\picully\\src\\components\\forms\\UploadImage.js":"23","D:\\frontend\\Projects\\picully\\src\\components\\Cards\\AlbumCard.js":"24","D:\\frontend\\Projects\\picully\\src\\hooks\\useAlbum.js":"25","D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\ImageGrid.js":"26","D:\\frontend\\Projects\\picully\\src\\components\\Cards\\ImageCard.js":"27","D:\\frontend\\Projects\\picully\\src\\components\\album\\AlbumGrid.js":"28","D:\\frontend\\Projects\\picully\\src\\components\\album\\Album.js":"29","D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\previewImageGrid.js":"30","D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\PreviewImageGrid.js":"31","D:\\frontend\\Projects\\picully\\src\\components\\album\\Albums.js":"32","D:\\frontend\\Projects\\picully\\src\\hooks\\useUploadImage.js":"33","D:\\frontend\\Projects\\picully\\src\\hooks\\useDelete.js":"34","D:\\frontend\\Projects\\picully\\src\\components\\forms\\CreateAlbumForm.js":"35","D:\\frontend\\Projects\\picully\\src\\components\\album\\CreateAlbum.js":"36","D:\\frontend\\Projects\\picully\\src\\components\\error\\NotFound.js":"37","D:\\frontend\\Projects\\picully\\src\\components\\forms\\CreateNewAlbumFromPickedImages.js":"38","D:\\frontend\\Projects\\picully\\src\\components\\album\\SharedAlbum.js":"39","D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\SharedImageGrid.js":"40"},{"size":5654,"mtime":1610635970507,"results":"41","hashOfConfig":"42"},{"size":1652,"mtime":1612392562559,"results":"43","hashOfConfig":"42"},{"size":914,"mtime":1610639033287,"results":"44","hashOfConfig":"42"},{"size":1818,"mtime":1611736151336,"results":"45","hashOfConfig":"42"},{"size":564,"mtime":1610613192949,"results":"46","hashOfConfig":"42"},{"size":8120,"mtime":1610886458710,"results":"47","hashOfConfig":"42"},{"size":375,"mtime":1610612732841,"results":"48","hashOfConfig":"42"},{"size":10115,"mtime":1610613192897,"results":"49","hashOfConfig":"42"},{"size":1133,"mtime":1610613193038,"results":"50","hashOfConfig":"42"},{"size":372,"mtime":1611074057477,"results":"51","hashOfConfig":"42"},{"size":3144,"mtime":1610612731075,"results":"52","hashOfConfig":"42"},{"size":4886,"mtime":1610613192912,"results":"53","hashOfConfig":"42"},{"size":755,"mtime":1610612731118,"results":"54","hashOfConfig":"42"},{"size":1261,"mtime":1610613192851,"results":"55","hashOfConfig":"42"},{"size":2841,"mtime":1610613192943,"results":"56","hashOfConfig":"42"},{"size":4118,"mtime":1610613192906,"results":"57","hashOfConfig":"42"},{"size":1262,"mtime":1610613192846,"results":"58","hashOfConfig":"42"},{"size":3977,"mtime":1612391730253,"results":"59","hashOfConfig":"42"},{"size":2857,"mtime":1610613193036,"results":"60","hashOfConfig":"42"},{"size":322,"mtime":1610612730553,"results":"61","hashOfConfig":"42"},{"size":592,"mtime":1610062161101,"results":"62","hashOfConfig":"42"},{"size":725,"mtime":1610621916998,"results":"63","hashOfConfig":"42"},{"size":5001,"mtime":1610887606748,"results":"64","hashOfConfig":"42"},{"size":1238,"mtime":1610613794156,"results":"65","hashOfConfig":"42"},{"size":1083,"mtime":1610625310235,"results":"66","hashOfConfig":"42"},{"size":8216,"mtime":1612427864573,"results":"67","hashOfConfig":"42"},{"size":1571,"mtime":1610614438713,"results":"68","hashOfConfig":"42"},{"size":2351,"mtime":1610885276957,"results":"69","hashOfConfig":"42"},{"size":5339,"mtime":1610888037440,"results":"70","hashOfConfig":"42"},{"size":562,"mtime":1610616106222,"results":"71","hashOfConfig":"42"},{"size":785,"mtime":1610666810237,"results":"72","hashOfConfig":"42"},{"size":2528,"mtime":1610807086526,"results":"73","hashOfConfig":"42"},{"size":2446,"mtime":1610665017034,"results":"74","hashOfConfig":"42"},{"size":437,"mtime":1610634049038,"results":"75","hashOfConfig":"42"},{"size":5343,"mtime":1610795251519,"results":"76","hashOfConfig":"42"},{"size":437,"mtime":1610613192861,"results":"77","hashOfConfig":"42"},{"size":263,"mtime":1610613192877,"results":"78","hashOfConfig":"42"},{"size":5304,"mtime":1610888533428,"results":"79","hashOfConfig":"42"},{"size":2067,"mtime":1612392618975,"results":"80","hashOfConfig":"42"},{"size":6004,"mtime":1612392286225,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},"ekvwxz",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"85"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"85"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"85"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"85"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"85"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"85"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"85"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"85"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"85"},"D:\\frontend\\Projects\\picully\\src\\components\\forms\\SignIn.js",["192","193","194","195"],"import {useNavigate} from 'react-router-dom'\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  FormHelperText,\r\n  Button,\r\n  Center,\r\n  Container,\r\n  Box,\r\n  Flex, \r\n  Spacer,\r\n  Text\r\n} from \"@chakra-ui/react\"\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { useContext, useState } from 'react';\r\nimport { UpdateContext } from '../../contexts/UpdateContext';\r\n\r\n\r\n//Yup Validation schema for signing in\r\nconst SignInSchema = Yup.object().shape({\r\n  //email validation rules\r\n  email: Yup.string()\r\n  .email('invalid email.')\r\n  .required('Please enter a valid email'),\r\n  //pw validation rules\r\n  password: Yup.string()\r\n  .required('A valid password is required')\r\n  // .min(8, 'password not valid')\r\n  // .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\r\n})\r\n\r\nconst SignIn = () => {\r\n  const navigate = useNavigate()\r\n  const {signupIsClicked, setSignUpIsClicked, setUserLoggedIn} = useContext(UpdateContext)\r\n  const { logout, login, currentUser } = useAuth()\r\n  const handleSignOut = () => logout();\r\n  const handleSignUp = () => setSignUpIsClicked(!signupIsClicked)\r\n  return (\r\n  \r\n    \r\n    //formik handling form state \r\n    <Flex \r\n    justify=\"center\" \r\n    align=\"center\" \r\n    minW={[\"sm\", \"md\", \"lg\", \"xl\"]}\r\n    minH={[\"sm\", \"md\", \"lg\", \"xl\"]}\r\n    >\r\n        <Formik\r\n        initialValues={{\r\n          email: '',\r\n          password: '',\r\n        }}\r\n        validationSchema={SignInSchema}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          try { \r\n            await login(values.email, values.password) // \r\n            setSubmitting(false)\r\n            setUserLoggedIn(true)\r\n            navigate(\"/\")\r\n\r\n        } catch (err) {\r\n            console.log('error', err)\r\n        }\r\n        }}\r\n      >\r\n          {(props) => (\r\n            \r\n            <Form >\r\n              <Field name=\"email\">\r\n                {({ field, form }) => (\r\n                  <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                    <FormControl isInvalid={form.errors.email && form.touched.email} isRequired>\r\n                      <FormLabel color=\"white\" htmlFor=\"email\" p={[\"sm\", \"md\", \"lg\", \"xl\"]}>Email</FormLabel>\r\n                      <Input \r\n                        {...field}\r\n                        focusBorderColor=\"white\"\r\n                        value={props.values.email}\r\n                        id=\"email\"\r\n                        color=\"white\"\r\n                        type=\"email\"\r\n                        placeholder=\"email\" \r\n                        onChange={props.handleChange} \r\n                        onBlur={props.handleBlur} \r\n                      />\r\n                      <FormErrorMessage>{form.errors.email}</FormErrorMessage>\r\n                    </FormControl>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n              <Field name=\"password\" >\r\n                {({ field, form }) => (\r\n                  <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                    <FormControl isInvalid={form.errors.password && form.touched.password} isRequired >\r\n                      <FormLabel htmlFor=\"password\" color=\"white\" fontWeight=\"bold\" mt=\"16px\">Password</FormLabel>\r\n                      <Input  \r\n                        {...field}\r\n                        color=\"white\"\r\n                        focusBorderColor=\"white\"\r\n                        value={props.values.password}\r\n                        id=\"password\" \r\n                        type=\"password\"\r\n                        placeholder=\"password\" \r\n                        onChange={props.handleChange} \r\n                        onBlur={props.handleBlur} />\r\n                      <FormErrorMessage>{form.errors.password}</FormErrorMessage>\r\n                    </FormControl>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n           \r\n                {\r\n\r\n                !currentUser ?\r\n                <>\r\n                <Container p=\"10px\"  mt=\"14px\">\r\n                  <Text as=\"i\" color=\"white\">\r\n                    Not a member yet? Sign up today!\r\n                  </Text>\r\n                </Container>\r\n                <Flex\r\n                justify=\"space-around\"\r\n                align=\"center\"\r\n                direction={[\"row\", \"row\", \"row\", \"row\"]}>\r\n                  <Box>\r\n                    <Button\r\n                      mt={4}\r\n                      background=\"white\"\r\n                      p={[\"20.2px\", \"md\", \"lg\", \"xl\"]}\r\n                      color=\"teal.500\"\r\n                      isLoading={props.isSubmitting}\r\n                      type=\"submit\"\r\n                      >\r\n                      Sign in\r\n                    </Button>\r\n                  </Box>\r\n                  <Box>\r\n                    <Button\r\n                        mt={4}\r\n                        color=\"white\"\r\n                        bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\r\n                        onClick={handleSignUp}\r\n                        _hover={{\r\n                          transition: \"all 0.6s ease-out\",\r\n                          color: \"linear-gradient(to right, #3ebac6 0%, #8b539e 50%, #e53782 100%)\"\r\n                        }}\r\n                    >\r\n                      Sign Up\r\n                    </Button>\r\n                  </Box>\r\n                </Flex>\r\n                </>\r\n                :\r\n                <Button onClick={handleSignOut}>Sign Out</Button>\r\n                }\r\n             \r\n            \r\n            </Form>\r\n        \r\n          )}\r\n        </Formik>\r\n      </Flex>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n",["196","197"],"D:\\frontend\\Projects\\picully\\src\\App.js",[],"D:\\frontend\\Projects\\picully\\src\\index.js",[],["198","199"],"D:\\frontend\\Projects\\picully\\src\\contexts\\AuthContext.js",["200"],"import React, { useContext, useState, useEffect,createContext } from \"react\"\r\nimport { auth } from \"../config/firebase\"\r\nimport { FirebaseContext } from \"./FirebaseContext\"\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\"\r\nimport \"firebase/firestore\";\r\nimport firebase from \"firebase/app\";\r\nconst AuthContext = createContext()\r\n\r\n\r\n\r\nexport const useAuth = () => useContext(AuthContext)\r\n\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const db = firebase.firestore()\r\n  const [currentUser, setCurrentUser] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const signup = (email, password, firstname, lastname) => {\r\n    auth.createUserWithEmailAndPassword(email, password).then(cred => {\r\n     return db.collection('users').doc(cred.user.uid).set({\r\n       firstName: firstname,\r\n       lastName: lastname,\r\n     })\r\n })\r\n }\r\n\r\n  const login = (email, password) => { \r\n    try {\r\n      auth.signInWithEmailAndPassword(email, password) \r\n    }\r\n    catch  {\r\n        console.log(\"failed to log in\")\r\n    }\r\n  }\r\n\r\n\r\n  const logout = () => {\r\n    return auth.signOut()\r\n  }\r\n\r\n  const resetPassword = (email) => {\r\n    return auth.sendPasswordResetEmail(email)\r\n  }\r\n\r\n  const updateEmail = (email) => {\r\n    return currentUser.updateEmail(email)\r\n  }\r\n\r\n  const updatePassword = (password) => {\r\n    return currentUser.updatePassword(password)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      setCurrentUser(user)\r\n      setLoading(false)\r\n    })\r\n\r\n    return unsubscribe\r\n  }, [])\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    signup,\r\n    logout,\r\n    resetPassword,\r\n    updateEmail,\r\n    updatePassword\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n","D:\\frontend\\Projects\\picully\\src\\config\\firebase.js",[],"D:\\frontend\\Projects\\picully\\src\\contexts\\FirebaseContext.js",["201","202"],"import React, { createContext, useState, useEffect, useContext } from 'react'\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/storage\"\r\nimport \"firebase/firestore\";\r\nimport { useAuth } from './AuthContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport const FirebaseContext = createContext()\r\n\r\nexport const useFire = () => useContext(FirebaseContext)\r\n\r\n\r\nexport const FirebaseProvider = ({ children }) => {\r\n  \r\n\r\n  const db = firebase.firestore()\r\n  const storage = firebase.storage()\r\n\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n  const [currentAlbum, setCurrentAlbum] = useState()\r\n  const [collectionData, setCollectionData] = useState([])\r\n  const [albumCollection, setAlbumCollection] = useState([])\r\n  const [created, setCreated] = useState(false)\r\n  const [updated, setUpdated] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [userData, setUserData] = useState({})\r\n  const [images, setImages] = useState([])\r\n  const {currentUser} = useAuth()\r\n  const [updatedAlbumTitle, setUpdatedAlbumTitle] = useState(false)\r\n\r\n\r\n  const firebaseFunctions = {\r\n    //get user collection\r\n    getUsers: async () => await db.collection('users').get().then((snapshot) => {\r\n      setIsLoading(true)\r\n      const userData = []\r\n      snapshot.forEach((doc) => {\r\n        userData.push({\r\n          id: doc.data().id,\r\n          firstname: doc.data().firstname,\r\n          lastname: doc.data().lastname,\r\n        })\r\n      });\r\n      console.log(\"user info\", userData)\r\n      setCollectionData([...userData])\r\n      setIsLoading(false)\r\n      return userData\r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n    ,\r\n    //get a user by id\r\n    getUser: async (id) => await db.collection('users').doc(id).get().then(doc => {\r\n      setIsLoading(true)\r\n      const user = {\r\n        firstName: '',\r\n        lastName: '',\r\n        id: '',\r\n      }\r\n      user.firstName = doc.data().firstName\r\n      user.lastName = doc.data().lastName\r\n      user.id = doc.data().id\r\n      setUserData({...user})\r\n      console.log(user)\r\n      setIsLoading(false)\r\n      return user\r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n    ,\r\n    //create User\r\n    createUser: async (firstname, lastname) => await db.collection('users').add({\r\n      firstname,\r\n      lastname,\r\n      createdAt: timestamp()\r\n    }).then(docRef => {\r\n      const dataRef = db.collection(\"users\").doc(docRef.id);\r\n      return dataRef.update({\r\n        id: dataRef.id\r\n     })\r\n    }),\r\n    //create album\r\n    createAlbum: async (name, desc, id) => {\r\n      setIsLoading(true)\r\n      setCreated(false)\r\n      const num = uuidv4()\r\n       await db.collection(\"albums\").add({\r\n        title: name,\r\n        description: desc,\r\n        owner_id: id,\r\n        images: [],\r\n        slug: name.replace(/\\s+/g, '-').toLowerCase() + `-${num}`,\r\n        createdAt: timestamp(),\r\n        id\r\n        \r\n      }).then(ref => {\r\n        ref.update({\r\n          id: ref.id\r\n      }).catch(\r\n       err => console.error(\"error\", err)   \r\n      )\r\n      setIsLoading(false)\r\n      setCreated(true)\r\n      \r\n      })    \r\n    }\r\n  ,\r\n\r\n    createAlbumWithImages: async (title, desc, owner, id, images) => {\r\n      const num = uuidv4()\r\n      setIsLoading(true)\r\n      setCreated(false)\r\n      await db.collection(\"albums\").add({\r\n        title: title,\r\n        description: desc,\r\n        owner_id: owner,\r\n        images: [],\r\n        slug: title.replace(/\\s+/g, '-').toLowerCase()+ `-${num}`,\r\n        createdAt: timestamp(),\r\n        id\r\n        \r\n      }).then(ref => {   \r\n          ref.update({\r\n            id: ref.id        \r\n      }).then(async () => {\r\n        if(images.length){\r\n          await images.forEach(img => {\r\n            db.collection(\"images\").doc(img.id).update({\r\n              albums: firebase.firestore.FieldValue.arrayUnion\r\n              (\r\n                db.collection(\"albums\").doc(ref.id)\r\n              )\r\n            })\r\n          })    \r\n        }\r\n      }).catch(\r\n        err => console.error(\"error\", err)   \r\n       )\r\n      \r\n\r\n      setIsLoading(false)\r\n      setCreated(true)\r\n      \r\n      })    \r\n    }\r\n    \r\n    \r\n    ,\r\n    updateAlbumName: async (id, newName) => {\r\n      let ref = db.collection(\"albums\").doc(id)\r\n      const num = uuidv4()\r\n      setIsLoading(true)\r\n      setUpdatedAlbumTitle(true)\r\n      await ref.update({\r\n        title: newName,\r\n        slug: newName.replace(/\\s+/g, '-').toLowerCase()+ `-${num}`,\r\n      }).then(\r\n        setIsLoading(false),\r\n        setUpdatedAlbumTitle(false)\r\n        \r\n      ).catch(err => console.log(\"error\", err))\r\n \r\n    },\r\n      //get albums\r\n    getUserAlbums: async (id) => await db.collection('albums').where(\"owner_id\", \"==\", id).get().then((snapshot) => {\r\n      setIsLoading(true)\r\n      const albums = []\r\n\r\n      snapshot.forEach((doc) => {\r\n        albums.push(doc.data())\r\n      });\r\n      console.log(\"album info\", albums)\r\n      setAlbumCollection([...albums])\r\n      setIsLoading(false)\r\n      return albums\r\n    }, err => {\r\n      console.log(err)\r\n    }),\r\n    getAlbumByTitle: async (name) => {\r\n     await db.collection('albums').where('title', '==', name).get().then(snapshot => {\r\n        snapshot.forEach(doc => {\r\n          const tempAlbums = []\r\n          let tempObj = doc.id\r\n          console.log(\"albums\")\r\n          tempAlbums.push(doc.data())\r\n          setAlbumCollection(tempAlbums)\r\n          setCurrentAlbum(tempObj)\r\n          setIsLoading(false)\r\n          return tempObj\r\n        })          \r\n      }).catch(function(error) {\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n    }\r\n    ,\r\n    //get ablum by album id\r\n    getAlbumById: async (albumId) => {\r\n      // get ref\r\n      const albumIdRef = db.collection('albums')\r\n      setIsLoading(true)\r\n      albumIdRef\r\n      .where('id', '==', albumId)\r\n      .onSnapshot((querySnapshot) => {\r\n        const items = [];\r\n        querySnapshot.forEach((doc) => {\r\n          items.push(doc.data());\r\n        })\r\n        return items\r\n      })\r\n      \r\n  }\r\n\r\n    ,\r\n    //get images from collection\r\n    getImages: async (id) => await db.collection('images').get().then((snapshot) => {\r\n      setIsLoading(true)\r\n      const imageArr = []\r\n      const userImgs = []\r\n      snapshot.forEach((doc) => {\r\n        imageArr.push({\r\n          title: doc.data().title,\r\n          path: doc.data().path,\r\n          size: doc.data().size,\r\n          ownderId: doc.data().owner_id,\r\n          url: doc.data().url\r\n        })\r\n      })\r\n      imageArr.forEach(item => {\r\n        if(item.ownerId === currentUser.uid) {\r\n          console.log(\"item has owner\", item)\r\n          userImgs.push(item)\r\n        }\r\n      })\r\n      setImages([...imageArr])\r\n      setIsLoading(false)\r\n      return imageArr\r\n    }, err => {\r\n      console.log(err)\r\n    })\r\n    ,\r\n    getImagesByAlbumId: async (id) => {\r\n       await db.collection(\"images\").where(\"album\", \"==\", id).get().then(querySnapshot => {\r\n        const imageArr = []\r\n        querySnapshot.forEach(doc => {\r\n          console.log(doc.data(), \"DATA\")\r\n            imageArr.push({\r\n              title: doc.data().title,\r\n              album: doc.data().album,\r\n              path: doc.data().path,\r\n              size: doc.data().size,\r\n              url: doc.data().url\r\n            })\r\n          })\r\n          console.log(\"image in current album\", imageArr, id)\r\n          // setImages([...imageArr])\r\n          setIsLoading(false)\r\n          return imageArr\r\n        })\r\n    .catch(function(error) {\r\n        console.log(\"Error getting documents: \", error);\r\n    });\r\n    }\r\n     \r\n  }\r\n\r\n\r\n  const firebaseContextValue = {\r\n    firebaseFunctions,\r\n    collectionData,\r\n    userData,\r\n    isLoading,\r\n    timestamp,\r\n    db,\r\n    created,\r\n    updatedAlbumTitle,\r\n    setUpdatedAlbumTitle,\r\n    images,\r\n    albumCollection,\r\n    updated,\r\n    currentAlbum,\r\n    storage\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <FirebaseContext.Provider\r\n      value=\r\n      {firebaseContextValue}\r\n    >\r\n      {children}\r\n    </FirebaseContext.Provider >\r\n  )\r\n}\r\n","D:\\frontend\\Projects\\picully\\src\\reportWebVitals.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\forms\\SignUp.js",["203","204","205","206"],"import {useNavigate} from 'react-router-dom'\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  FormHelperText,\r\n  Button,\r\n  Center,\r\n  Container,\r\n  Box,\r\n  Flex, \r\n  Spacer,\r\n  Checkbox,\r\n  Text,\r\n  Popover,\r\n  PopoverTrigger,\r\n  useDisclosure,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Link\r\n} from \"@chakra-ui/react\"\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { useContext, useState } from 'react';\r\nimport { UpdateContext } from '../../contexts/UpdateContext';\r\n\r\n\r\nconst SignInSchema = Yup.object().shape({\r\n  //email validation rules\r\n  email: Yup.string()\r\n  .email('invalid email.')\r\n  .required('Please enter a valid email'),\r\n  //pw validation rules\r\n  password: Yup.string()\r\n  .required('A valid password is reuired')\r\n  .min(8, 'password not valid')\r\n  .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\r\n  confirmPassword: Yup\r\n    .string()\r\n    .required()\r\n    .label('Confirm password')\r\n    .oneOf([Yup.ref('password'), null],'Passwords must match',),\r\n})\r\n\r\nconst SignUp = () => {\r\n  const navigate = useNavigate()\r\n  const { signup } = useAuth()\r\n  const {setSignUpIsClicked} = useContext(UpdateContext)\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const handleGoBack = () => setSignUpIsClicked(false)\r\n  const [error, setError] = useState(false)\r\n  return (\r\n  \r\n    <Flex \r\n      justify=\"center\" \r\n      align=\"center\"\r\n      pl={[\"16px\", \"18px\", \"20px\", \"22px\"]}\r\n      pr={[\"16px\", \"18px\", \"20px\", \"22px\"]}\r\n      pt={[\"20px\", \"18px\", \"20px\", \"22px\"]}\r\n    >\r\n    <Formik\r\n    initialValues={{\r\n      firstname: '',\r\n      lastname: '',\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: ''\r\n\r\n    }}\r\n    validationSchema={SignInSchema}\r\n    onSubmit={async (values, { setSubmitting }) => {\r\n      try { \r\n        await signup(values.email, values.password, values.firstname, values.lastname) // \r\n        setSubmitting(false)\r\n        navigate(\"/\")\r\n\r\n    } catch (err) {\r\n        setError(true)\r\n    }\r\n    }}\r\n  >\r\n      {(props) => (\r\n        <Form w={[300, 400, 560]} >\r\n          <Field name=\"firstname\" >\r\n            {({ field, form }) => (\r\n              <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                <FormControl isInvalid={form.errors.firstname && form.touched.firstname} isRequired>\r\n                  <FormLabel htmlFor=\"firstname\" color=\"white\" fontWeight=\"bold\" mt=\"16px\">First Name</FormLabel>\r\n                  <Input  \r\n                    {...field}\r\n                    color=\"white\"\r\n                    focusBorderColor=\"white\"\r\n                    value={props.values.firstname}\r\n                    id=\"firstname\" \r\n                    type=\"firstname\"\r\n                    placeholder=\"firstname\" \r\n                    onChange={props.handleChange} \r\n                    onBlur={props.handleBlur} />\r\n                  <FormErrorMessage>{form.errors.firstname}</FormErrorMessage>\r\n                </FormControl>\r\n              </Box>\r\n            )}\r\n          </Field>\r\n          <Field name=\"lastname\" >\r\n            {({ field, form }) => (\r\n              <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                <FormControl isInvalid={form.errors.lastname && form.touched.lastname} isRequired>\r\n                  <FormLabel htmlFor=\"lastname\" color=\"white\" fontWeight=\"bold\" mt=\"16px\">Last Name</FormLabel>\r\n                  <Input  \r\n                    {...field}\r\n                    color=\"white\"\r\n                    focusBorderColor=\"white\"\r\n                    value={props.values.lastname}\r\n                    id=\"lastname\" \r\n                    type=\"lastname\"\r\n                    placeholder=\"lastname\" \r\n                    onChange={props.handleChange} \r\n                    onBlur={props.handleBlur} />\r\n                  <FormErrorMessage>{form.errors.lastname}</FormErrorMessage>\r\n                </FormControl>\r\n              </Box>\r\n            )}\r\n          </Field>\r\n          <Field name=\"email\">\r\n            {({ field, form }) => (\r\n              <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                <FormControl isInvalid={form.errors.email && form.touched.email} isRequired>\r\n                  <FormLabel color=\"white\" htmlFor=\"email\" mt=\"16px\">Email</FormLabel>\r\n                  <Input \r\n                    {...field}\r\n                    focusBorderColor=\"white\"\r\n                    value={props.values.email}\r\n                    id=\"email\"\r\n                    color=\"white\"\r\n                    type=\"email\"\r\n                    placeholder=\"email\" \r\n                    onChange={props.handleChange} \r\n                    onBlur={props.handleBlur} \r\n                  />\r\n                  <FormErrorMessage>{form.errors.email}</FormErrorMessage>\r\n                </FormControl>\r\n              </Box>\r\n            )}\r\n          </Field>\r\n          <Field name=\"password\" >\r\n            {({ field, form }) => (\r\n              <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                <FormControl isInvalid={form.errors.password && form.touched.password} isRequired>\r\n                  <FormLabel htmlFor=\"password\" color=\"white\" fontWeight=\"bold\" mt=\"16px\">Password</FormLabel>\r\n                  <Input  \r\n                    {...field}\r\n                    color=\"white\"\r\n                    focusBorderColor=\"white\"\r\n                    value={props.values.password}\r\n                    id=\"password\" \r\n                    type=\"password\"\r\n                    placeholder=\"password\" \r\n                    onChange={props.handleChange} \r\n                    onBlur={props.handleBlur} />\r\n                  <FormErrorMessage>{form.errors.password}</FormErrorMessage>\r\n                </FormControl>\r\n              </Box>\r\n            )}\r\n          </Field>\r\n          <Field name=\"confirmPassword\" >\r\n            {({ field, form }) => (\r\n              <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                <FormControl isInvalid={form.errors.confirmPassword && form.touched.confirmPassword} isRequired>\r\n                  <FormLabel htmlFor=\"confirmPassword\" color=\"white\" fontWeight=\"bold\" mt=\"16px\">confirm password</FormLabel>\r\n                  <Input  \r\n                    {...field}\r\n                    color=\"white\"\r\n                    focusBorderColor=\"white\"\r\n                    value={props.values.confirmPassword}\r\n                    id=\"confirmPassword\" \r\n                    type=\"password\"\r\n                    placeholder=\"confirmPassword\" \r\n                    onChange={props.handleChange} \r\n                    onBlur={props.handleBlur} />\r\n                  <FormErrorMessage>{form.errors.confirmPassword}</FormErrorMessage>\r\n                </FormControl>\r\n              </Box>\r\n            )}\r\n          </Field>\r\n          <Box m=\"10px\" p=\"5px\">\r\n            <Checkbox isRequired colorScheme=\"green\" color=\"white\">   \r\n              by signing up you <Text as=\"em\">agree</Text> to our <Link as=\"button\" color=\"white\" onClick={onOpen}>Terms and Conditons</Link>\r\n                <Modal isOpen={isOpen} onClose={onClose}>\r\n                  <ModalOverlay />\r\n                    <ModalContent>\r\n                     \r\n                        <ModalHeader ml=\"10px\">Terms and Conditions</ModalHeader>\r\n                     \r\n                        <ModalCloseButton />\r\n                      <ModalBody>\r\n                        <Container>\r\n                          <Text fontSize=\"1em\">\r\n                            Its hands were holograms that altered to match the convolutions of the car’s floor. Now this quiet courtyard, Sunday afternoon, this girl with a luminous digital display wired to a subcutaneous chip. Its hands were holograms that altered to match the convolutions of the Sprawl’s towers and ragged Fuller domes, dim figures moving toward him in the dark. Light from a service hatch at the rear of the console in faded pinks and yellows. Why bother with the movement of the train, their high heels like polished hooves against the gray metal of the arcade showed him broken lengths of damp chipboard and the drifting shoals of waste.\r\n                          </Text>\r\n                        </Container>\r\n                      </ModalBody>\r\n                      <Center>\r\n                        <ModalFooter>\r\n                        <Button colorScheme=\"teal\" onClick={onClose}>\r\n                            Close\r\n                        </Button>\r\n                      </ModalFooter>\r\n                    </Center>\r\n                  </ModalContent>\r\n                </Modal>\r\n              </Checkbox>\r\n            </Box>\r\n            <Flex\r\n            justify=\"space-around\"\r\n            align=\"center\"\r\n            direction={[\"column\", \"column\", \"row\", \"row\"]}\r\n            p={[\"16px\", \"18px\", \"20px\", \"22px\"]}\r\n            mb={[\"16px\", \"18px\", \"20px\", \"22px\"]}\r\n            >     \r\n              <Box>\r\n                <Button\r\n                    mt={4}\r\n                    color=\"white\"\r\n                    bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\r\n                    type=\"submit\"\r\n                    _hover={{\r\n                      transition: \"all 0.6s ease-out\",\r\n                      color: \"linear-gradient(to right, #3ebac6 0%, #8b539e 50%, #e53782 100%)\"\r\n                    }}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n              </Box>\r\n              <Box>\r\n                <Button\r\n                  mt={4}\r\n                  background=\"white\"\r\n                  color=\"teal.500\"\r\n                  pl={[\"26px\", \"28px\", \"30px\", \"32px\"]}\r\n                  pr={[\"26px\", \"28px\", \"30px\", \"32px\"]}\r\n                  isLoading={props.isSubmitting}\r\n                  onClick={handleGoBack}\r\n                  >\r\n                  Close\r\n                </Button>\r\n              </Box>\r\n              {error && <header>something went wrong: {error}</header>}\r\n            </Flex>           \r\n        </Form>  \r\n      )}\r\n    </Formik>\r\n  \r\n  </Flex>\r\n  )\r\n}\r\n\r\nexport default SignUp\r\n",["207","208"],"D:\\frontend\\Projects\\picully\\src\\views\\Home.js",["209","210","211","212","213","214","215","216"],"import { Box, Button, Center, Flex, Heading, Spinner } from \"@chakra-ui/react\"\r\nimport { useContext } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport Albums from \"../components/album/AlbumGrid\"\r\nimport Console from \"../components/console/Console\"\r\nimport SignIn from \"../components/forms/SignIn\"\r\nimport Welcome from \"../components/Welcome\"\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\nimport { FirebaseContext } from \"../contexts/FirebaseContext\"\r\nimport About from \"./About\"\r\n\r\nconst Home = () => {\r\n  const {currentUser, logout} = useAuth()\r\n  const {isLoading} = useContext(FirebaseContext)\r\n\r\n  const navigate= useNavigate()\r\n  const handleSignOut = () => {\r\n    logout()\r\n    navigate('/sign-in')\r\n  }\r\n\r\n  return (\r\n      <>\r\n        { \r\n        !currentUser ? \r\n        <Welcome /> \r\n        : \r\n        isLoading ? \r\n        <Spinner\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n          color=\"blue.500\"\r\n          size=\"xl\"\r\n        /> \r\n        : \r\n        <Console />}\r\n        { !currentUser && <About />}\r\n      </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","D:\\frontend\\Projects\\picully\\src\\components\\console\\Console.js",["217","218","219","220","221","222","223","224"],"\r\nimport { Box, Flex, Link, Heading } from '@chakra-ui/react'\r\nimport { useEffect } from 'react'\r\nimport {Link as ReactLink, useNavigate} from 'react-router-dom'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport Albums from '../album/Albums'\r\n\r\nconst Console = () => {\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Albums />\r\n    </>\r\n \r\n  )\r\n}\r\n\r\nexport default Console\r\n","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavBar.js",["225","226"],"import { Button, Flex, Heading, ListItem,Link, Spacer, UnorderedList} from '@chakra-ui/react'\r\nimport {useContext, useEffect} from 'react'\r\nimport {Link as ReactLink, useNavigate} from 'react-router-dom'\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { UpdateContext } from '../../contexts/UpdateContext';\r\n\r\nconst NavBar = () => {\r\nconst {signedUpIsClicked,setSignUpIsClicked} = useContext(UpdateContext)\r\nconst {currentUser, logout} = useAuth();\r\nconst navigate = useNavigate()\r\nconst handleSignUpMenuClick = () => setSignUpIsClicked(!signedUpIsClicked)\r\n\r\nconst handleSignOut = async () => { \r\n   try { \r\n     await logout() \r\n     navigate(\"/\") \r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n}\r\n  return (\r\n    <Flex\r\n      color=\"teal.500\"\r\n      maxW=\"100vw\" \r\n      minW=\"100vw\"\r\n      h=\"80px\"\r\n      overflow=\"hidden\"\r\n      justify=\"space-between\"\r\n    >\r\n      <Flex justify=\"center\" align=\"center\">\r\n        <Heading color=\"teal.300\" ml=\"60px\" p=\"5px\" cursor=\"pointer\" _hover={{color: \"teal.200\"}}>Picully</Heading>\r\n      </Flex>\r\n\r\n      <Flex \r\n          justify=\"center\" \r\n          align=\"center\"\r\n          borderLeft=\"4px\"\r\n          borderColor=\"teal.500\"\r\n          pl=\"7rem\"\r\n          >\r\n        <UnorderedList\r\n          display=\"flex\" \r\n          justify=\"center\" \r\n          align=\"stretch\"\r\n          direction=\"row\" \r\n          styleType=\"none\"\r\n          fontSize={[\"1rem\", \"1rem\", \"1.1rem\", \"1.125rem\"]}\r\n          fontWeight=\"bold\"\r\n          role=\"navigation\" \r\n          aria-label=\"Main\"\r\n          mr=\"60px\"\r\n\r\n          cursor=\"pointer\"\r\n         >\r\n          <ListItem  \r\n            p={[\"4px\", \"6px\", \"8px\", \"16px\"]}\r\n            _hover=\r\n              {{\r\n                background: \"teal.500\",\r\n                color: \"white\"\r\n              }}  \r\n            >\r\n            <Link as={ReactLink} to=\"/\">Home</Link>\r\n          </ListItem>\r\n          <ListItem\r\n            p={[\"4px\", \"6px\", \"8px\", \"16px\"]}\r\n            _hover=\r\n              {{\r\n                background: \"teal.500\",\r\n                color: \"white\"\r\n              }}\r\n          >\r\n            <Link as={ReactLink} to=\"/\">About</Link>\r\n          </ListItem>\r\n          {\r\n          !currentUser ?\r\n          <ListItem >\r\n            <Button \r\n              onClick={handleSignUpMenuClick}\r\n              color=\"white\"\r\n              background=\"teal.500\"\r\n              mt=\"8px\"\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </ListItem>\r\n          :\r\n          <Button \r\n            onClick={handleSignOut}\r\n            color=\"white\"\r\n            background=\"teal.500\"\r\n            mt=\"8px\"\r\n          >\r\n            Sign out\r\n          </Button>\r\n          }\r\n          <ListItem  \r\n            p={[\"4px\", \"6px\", \"8px\", \"16px\"]} \r\n            mr={[\"2px\", \"4px\", \"8px\", \"16px\"]}\r\n            _hover=\r\n              {{\r\n                background: \"teal.500\",\r\n                color: \"white\"\r\n              }}\r\n            >\r\n            <Link as={ReactLink} to=\"/\">Contact</Link>\r\n          </ListItem>\r\n        </UnorderedList>\r\n        </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavMobile.js",["227","228"],"import { Flex, Heading, ListItem, Link, Spacer, UnorderedList, Box, useDisclosure, CloseButton, Button } from '@chakra-ui/react'\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\"\r\nimport {Link as ReactLink} from 'react-router-dom'\r\nimport React, { useRef } from 'react'\r\nimport { ArrowForwardIcon, HamburgerIcon } from '@chakra-ui/icons'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nconst NavMobile = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const boxRef = useRef()\r\n  const {currentUser, logout} = useAuth()\r\n  const handleSignOut = () => logout()\r\n  return (\r\n    <>\r\n\r\n      <Flex justify=\"space-between\" align=\"center\" minW=\"100vw\">\r\n        <Heading \r\n        color=\"teal.300\" \r\n        ml={[\"1.4rem\", \"2rem\", \"2.3rem\", \"xl\"]}\r\n        mt={[\"1rem\", \"2rem\", \"2.3rem\", \"xl\"]}\r\n        >Picully</Heading>\r\n        <Box ref={boxRef} mt={[\"1.2rem\", \"md\", \"lg\", \"xl\"]} mr={[\"2rem\", \"md\", \"lg\", \"xl\"]} onClick={onOpen}>\r\n          {!isOpen && <HamburgerIcon w={[10, 12, 16]} h={[10, 12, 16]} />}\r\n        </Box>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={boxRef}\r\n        background=\"green\"\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <Flex justify=\"space-around\" align=\"center\" mt=\"20px\">\r\n              <DrawerHeader textAlign=\"center\">Menu</DrawerHeader>\r\n              <Box>\r\n                <CloseButton onClick={onClose}/>\r\n              </Box>\r\n            </Flex>\r\n            <DrawerBody display=\"flex\" justifyContent=\"center\"  alignItems=\"center\">\r\n              <UnorderedList \r\n                display=\"flex\" \r\n                styleType=\"none\" \r\n                justify=\"center\" \r\n                align=\"center\" \r\n                flexDirection=\"column\" \r\n                fontSize=\"1.3rem\"\r\n              >\r\n                <ListItem\r\n                  display=\"inline-flex\"\r\n                  justifyContent=\"space-between\"\r\n                  borderBottom=\"2px\" \r\n                  borderColor=\"teal.200\"\r\n                  width=\"200px\"\r\n                 \r\n                >\r\n                  <Box>\r\n                    <Link as={ReactLink} to=\"/\">Home</Link>\r\n                  </Box>\r\n                  <Box>\r\n                    <ArrowForwardIcon />\r\n                  </Box>\r\n                </ListItem>\r\n\r\n                <ListItem\r\n                  display=\"inline-flex\"\r\n                  justifyContent=\"space-between\"\r\n                  borderBottom=\"2px\" \r\n                  borderColor=\"teal.200\"\r\n                  width=\"200px\"\r\n                  pt=\"16\"\r\n                >\r\n                  <Box>\r\n                    <Link as={ReactLink} to=\"/\">About</Link>\r\n                  </Box>\r\n                  <Box>\r\n                    <ArrowForwardIcon />\r\n                  </Box>\r\n                </ListItem>\r\n\r\n                <ListItem\r\n                  display=\"inline-flex\"\r\n                  justifyContent=\"space-between\"\r\n                  borderBottom=\"2px\" \r\n                  borderColor=\"teal.200\"\r\n                  width=\"200px\"\r\n                  pt=\"16\"\r\n                >\r\n                  <Box>\r\n                    <Link as={ReactLink} to=\"/\">Contact</Link>\r\n                  </Box>\r\n                  <Box>\r\n                    <ArrowForwardIcon />\r\n                  </Box>\r\n                </ListItem>\r\n\r\n                <ListItem\r\n                  display=\"inline-flex\"\r\n                  justifyContent=\"space-between\"\r\n                  borderBottom=\"2px\" \r\n                  borderColor=\"teal.200\"\r\n                  width=\"200px\"\r\n                  pt=\"16\"\r\n                  mb=\"10\"\r\n                >\r\n                  <Box>\r\n                    <Link as={ReactLink} to=\"/\">Home</Link>\r\n                  </Box>\r\n                  <Box>\r\n                    <ArrowForwardIcon />\r\n                  </Box>\r\n                </ListItem>\r\n\r\n              </UnorderedList>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter \r\n              display=\"flex\" \r\n              justifyContent=\"center\" \r\n              alignItems=\"center\"\r\n              mb={[\"3rem\", \"18px\", \"20px\", \"22px\"]}\r\n            >\r\n              {\r\n                currentUser \r\n                ? \r\n                <Button\r\n                  mt={2}\r\n                  mb={8}\r\n                  background=\"teal.200\"\r\n                  color=\"white\"\r\n                  size=\"md\"\r\n                  onClick={handleSignOut}\r\n                >\r\n                  Sign out\r\n                </Button>\r\n                :\r\n                \"\"\r\n              }     \r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </Flex>\r\n   </>\r\n  )\r\n}\r\n\r\nexport default NavMobile\r\n","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavIndex.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\Welcome.js",["229","230","231","232","233"],"import { Box, Container, Flex, Heading, Text } from '@chakra-ui/react'\r\nimport React, { useContext } from 'react'\r\nimport { useAuth } from '../contexts/AuthContext'\r\nimport { UpdateContext } from '../contexts/UpdateContext'\r\nimport Console from './console/Console'\r\nimport SignIn from './forms/SignIn'\r\nimport SignUp from './forms/SignUp'\r\nimport WelcomeBanner from './Hero/WelcomeBanner'\r\n\r\nconst Welcome = () => {\r\n  const {currentUser} = useAuth()\r\n  const {signUpIsClicked} = useContext(UpdateContext)\r\n  return (\r\n  \r\n      <Flex justify=\"space-around\" align=\"center\" direction={[\"column\", \"column\", \"column\", \"row\"]}>\r\n          <WelcomeBanner />\r\n          <Box\r\n            overflow=\"hidden\"\r\n            ml=\"auto\"\r\n            pb={[\"sm\", \"md\", \"lg\", \"16px\"]}\r\n            bgGradient=\"linear(to-b, teal.600, teal.200)\"\r\n            display=\"flex\"\r\n            alignContent=\"center\"\r\n            justifyContent=\"center\"\r\n            minH={[\"sm\", \"md\", \"lg\", \"100vh\"]}\r\n            minW={[\"100%\",\"100%\", \"100%\", \"xl\"]}\r\n            maxW={[\"100%\", \"100%\", \"100%\", \"100%\"]} \r\n            textAlign=\"center\" \r\n            >\r\n           { !signUpIsClicked ? <SignIn /> : <SignUp /> }\r\n          </Box>\r\n \r\n      </Flex>\r\n  \r\n  )\r\n}\r\n\r\nexport default Welcome\r\n","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavMobileSignedIn.js",["234"],"import { HamburgerIcon } from '@chakra-ui/icons'\r\nimport { Box, CloseButton, DrawerBody, Link, DrawerContent, DrawerHeader, DrawerOverlay, Flex, ListItem, UnorderedList, DrawerFooter, Drawer, useDisclosure, Button, Center } from '@chakra-ui/react'\r\nimport React, { useRef } from 'react'\r\nimport { Link as ReactLink } from 'react-router-dom'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\n\r\nconst NavMobileSignedIn = () => {\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const boxRef = useRef()\r\n  const {logout} = useAuth()\r\n  const handleSignOut = () => logout()\r\n\r\n  return (\r\n    <>\r\n    <Flex justify=\"flex-end\" align=\"center\" minW=\"100vw\">\r\n      <Box ref={boxRef} mt=\"10px\" mr=\"24px\" onClick={onOpen}>\r\n        {!isOpen && <HamburgerIcon w={10} h={10} />}\r\n      </Box>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={boxRef}\r\n        size={[\"full\", \"md\", \"lg\", \"0\"]}\r\n\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <Flex justify=\"space-around\" align=\"center\" mt=\"20px\">\r\n              <DrawerHeader textAlign=\"center\">Menu</DrawerHeader>\r\n              <Box>\r\n                <CloseButton onClick={onClose}/>\r\n              </Box>\r\n            </Flex>\r\n            <DrawerBody background=\"green\">\r\n              <UnorderedList \r\n                display=\"flex\" \r\n                styleType=\"none\" \r\n                p=\"10px\" \r\n                justify=\"space-around\" \r\n                align=\"center\" \r\n                flexDirection=\"column\" \r\n                ml=\"87px\" \r\n                mt=\"50px\" \r\n                fontSize=\"1.3rem\"\r\n              >\r\n                <ListItem>\r\n                  <Link as={ReactLink} to=\"/\">Home</Link>\r\n                </ListItem>\r\n\r\n                <ListItem mt=\"30px\">\r\n                  <Link as={ReactLink} to=\"/albums\" pr=\"5px\">Albums</Link>\r\n                </ListItem>\r\n\r\n                <ListItem mt=\"30px\">\r\n                  <Link as={ReactLink} to=\"/profile\">Profile</Link>\r\n                </ListItem>\r\n\r\n                <ListItem mt=\"30px\">\r\n                  <Link as={ReactLink} to=\"/albums/create\">Upload</Link>\r\n                </ListItem>\r\n\r\n              </UnorderedList>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter \r\n              display=\"flex\" \r\n              justifyContent=\"center\" \r\n              alignItems=\"center\"\r\n            >\r\n                <Button\r\n                mt={4}\r\n                mb={8}\r\n                background=\"teal.500\"\r\n                color=\"white\"\r\n                onClick={handleSignOut}\r\n                \r\n                >Sign out</Button>          \r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </Flex>\r\n   </>\r\n  )\r\n}\r\n\r\nexport default NavMobileSignedIn\r\n","D:\\frontend\\Projects\\picully\\src\\components\\navigation\\NavBarSignedIn.js",["235","236","237","238","239","240"],"import { Button, Flex, Heading, ListItem,Link, Spacer, UnorderedList, Avatar, Wrap, WrapItem, Tag, TagLabel, Box, Spinner} from '@chakra-ui/react'\r\nimport {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {Link as ReactLink, useNavigate} from 'react-router-dom'\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { FirebaseContext } from '../../contexts/FirebaseContext';\r\n\r\nconst NavBarSignedIn = () => {\r\n\r\n  const {firebaseFunctions} = useContext(FirebaseContext)\r\n  const {currentUser, logout} = useAuth();\r\n  const [user, setUser] = useState(false)\r\n  // const [isLoading, setIsLoading] = useState(false)\r\n  const [err, setError] = useState(false)\r\n  const navigate = useNavigate()\r\n  \r\n//get user info on mount\r\nuseEffect(() => {\r\n  const getUserInfoOnMount = async () => {\r\n    let res = await firebaseFunctions.getUser(currentUser.uid)\r\n    if(res) {\r\n      setUser(res)\r\n      console.log(user)\r\n    }\r\n    else {\r\n      setError('')\r\n    }\r\n  }\r\n  getUserInfoOnMount()\r\n}, [])\r\n\r\n\r\n\r\nconst handleGoHome = () => navigate('/console')\r\n\r\n const handleSignOut = async () => { \r\n   try { \r\n     await logout() \r\n     navigate(\"/\") \r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n}\r\n  return (\r\n    <Flex \r\n      color=\"teal.500\"\r\n      maxW=\"1200px\" \r\n      minW=\"100vw\"\r\n      h=\"80px\"\r\n      justify=\"space-between\"\r\n    >\r\n      <Flex justify=\"center\" align=\"center\" cursor=\"pointer\">\r\n        <Heading ml=\"60px\" p=\"5px\" onClick={handleGoHome}>Picully</Heading>\r\n      </Flex>\r\n      <Spacer />\r\n      <Flex justify=\"center\" align=\"center\">\r\n        <UnorderedList\r\n          display=\"flex\" \r\n          justify=\"center\" \r\n          align=\"stretch\"\r\n          direction=\"row\" \r\n          styleType=\"none\"\r\n          fontSize={[\"1rem\", \"1rem\", \"1.1rem\", \"1.125rem\"]}\r\n          fontWeight=\"bold\"\r\n          role=\"navigation\" \r\n          aria-label=\"Main\"\r\n          mr=\"60px\"\r\n         >\r\n          <ListItem  \r\n            p={[\"4px\", \"6px\", \"8px\", \"16px\"]}\r\n            _hover=\r\n              {{\r\n                background: \"teal.500\",\r\n                color: \"white\"\r\n              }}  \r\n            >\r\n            <Link as={ReactLink} to=\"/explore\">Explore</Link>\r\n          </ListItem>\r\n          <ListItem\r\n            p={[\"4px\", \"6px\", \"8px\", \"16px\"]}\r\n            _hover=\r\n              {{\r\n                border: \"2px solid teal.500\",\r\n                color: \"white\"\r\n              }}\r\n          >\r\n            <Link as={ReactLink} to=\"console/albums\">Albums</Link>\r\n          </ListItem>\r\n          <ListItem\r\n            p={[\"4px\", \"6px\", \"8px\", \"16px\"]}\r\n            _hover=\r\n              {{\r\n                border: \"2px solid teal.500\",\r\n                color: \"white\"\r\n              }}\r\n          >\r\n            <Link as={ReactLink} to=\"/console\">Home</Link>\r\n          </ListItem>\r\n\r\n          <ListItem  \r\n          m={[\"4px\", \"6px\", \"8px\", \"16px\"]}\r\n          _hover=\r\n              {{\r\n                border: \"2px solid teal.500\",\r\n                color: \"white\"\r\n              }}\r\n          >            \r\n            <Link as={ReactLink} to={\"/\"}>Profile</Link> \r\n          </ListItem>\r\n          :\r\n          <Button \r\n            onClick={handleSignOut}\r\n            color=\"white\"\r\n            background=\"teal.500\"\r\n            mt=\"8px\"\r\n          >\r\n            Sign out\r\n          </Button>\r\n          <Box>\r\n              <Tag \r\n                size=\"lg\" \r\n                colorScheme=\"teal\" \r\n                borderRadius=\"full\" \r\n                ml=\"3rem\"\r\n                mt=\"2px\" \r\n                p=\"5px\"\r\n              >\r\n                <Avatar\r\n                  src=\"https://bit.ly/broken-link\"\r\n                  size=\"md\"\r\n                  name={user.firstName}\r\n                  ml={1}\r\n                  mr={2}\r\n                 \r\n                />\r\n                <TagLabel pt=\"10px\" pb=\"10px\" pr=\"12px\" pl=\"5px\">{user ? `${user.firstName} ${user.lastName}` : 'error'}</TagLabel>\r\n              </Tag>\r\n            </Box>\r\n        </UnorderedList>\r\n        </Flex>\r\n    </Flex>\r\n            \r\n  )\r\n}\r\n\r\nexport default NavBarSignedIn\r\n","D:\\frontend\\Projects\\picully\\src\\components\\Hero\\WelcomeBanner.js",[],["241","242"],"D:\\frontend\\Projects\\picully\\src\\contexts\\UpdateContext.js",["243","244","245"],"import React, { useState, createContext, useContext, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { useAuth } from './AuthContext';\r\nimport { useFire } from './FirebaseContext';\r\n\r\nexport const UpdateContext = createContext();\r\n\r\n\r\nexport const useUpdate = () => useContext(UpdateContext)\r\n  \r\n\r\nexport const UpdateProvider = props => {\r\n    \r\n    const [signUpIsClicked, setSignUpIsClicked] = useState(false)\r\n    const [imageDeleted, setImageDeleted] = useState(false)\r\n    const [currentAlbumID, setCurrentAlbumID] = useState(undefined)\r\n    const [currentAlbum, setCurrentAlbum] = useState(undefined)\r\n    const [currentUserAlbums, setCurrentUserAlbums] = useState([])\r\n    const [userLoggedIn, setUserLoggedIn] = useState(false)\r\n    const {firebaseFunctions, db} = useFire()\r\n    const [isUploaded, setIsUploaded] = useState(false)\r\n    const [pickedImages, setPickedImages] = useState([])\r\n    const [discardedImages, setDiscardedImages] = useState([])\r\n    const [sharedIamges, setSharedImages] = useState([])\r\n    const [imagesInCurrentAlbum, setImagesInCurrentAlbum] = useState([])\r\n    const [imagesOwnedByCurrentUser, setImagesOwnedByCurrentUser] = useState()\r\n    const [albumToShare, setAlbumToShare] = useState(undefined)\r\n    const {currentUser} = useAuth()\r\n    const {created} = useFire()\r\n    const [sharedUrl, setSharedUrl] = useState(false)\r\n\r\n    const [userSelectedImagesToKeep, setuserSelectedImagesToKeep] = useState([])\r\n    const [userSelectedImagesToDelete, setuserSelectedImagesToDelete] = useState([])\r\n\r\n    useEffect(() => {\r\n        ( async () => {\r\n            if(currentUser !== null) {\r\n                setCurrentUserAlbums(\"\")\r\n                console.log(\"I RAN\")\r\n                let res = await firebaseFunctions.getUserAlbums(currentUser.uid)\r\n                console.log(res)\r\n                setCurrentUserAlbums(res)\r\n                let ref = db.collection(\"images\").where(\"album\", \"==\", currentUser.uid)\r\n                ref.get().then(snapshot => {\r\n                    let userImages = []\r\n                    snapshot.forEach(doc => {\r\n                        console.log(doc.data())\r\n                        userImages.push(doc.data())\r\n                        setImagesOwnedByCurrentUser(userImages)\r\n                    })\r\n                })\r\n            }\r\n            else return;\r\n        }\r\n\r\n        )()\r\n        if(imageDeleted){\r\n        setImageDeleted(false)\r\n        }\r\n        \r\n    }, [userLoggedIn,isUploaded, imageDeleted, created])\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if(albumToShare){\r\n                await db.collection(\"images\").where(\"albums\", \"array-contains\", albumToShare.id).get().then(snapshot => {\r\n                    snapshot.forEach(doc => {\r\n                        console.log(doc.data())\r\n                    })\r\n                })\r\n            }\r\n        })()\r\n       \r\n    }, [albumToShare])\r\n\r\n    const updateContextValue = {\r\n        \r\n      signUpIsClicked,\r\n      setSignUpIsClicked,\r\n      currentAlbumID,\r\n      setCurrentUserAlbums,\r\n      currentUserAlbums,\r\n      setUserLoggedIn,\r\n      userLoggedIn,\r\n      imagesOwnedByCurrentUser,\r\n      setCurrentAlbumID,\r\n      imageDeleted,\r\n      imagesInCurrentAlbum,\r\n      setCurrentAlbum,\r\n      currentAlbum,\r\n      setImagesInCurrentAlbum,\r\n      isUploaded,\r\n      pickedImages,\r\n      setPickedImages,\r\n      setIsUploaded,\r\n      setImageDeleted,\r\n      setAlbumToShare,\r\n      albumToShare,\r\n      setSharedUrl,\r\n      sharedUrl,\r\n      sharedIamges,\r\n      setSharedImages,\r\n      discardedImages,\r\n      setDiscardedImages,\r\n      userSelectedImagesToKeep, \r\n      setuserSelectedImagesToKeep,\r\n      userSelectedImagesToDelete, \r\n      setuserSelectedImagesToDelete   \r\n    }\r\n\r\n    return (\r\n        <UpdateContext.Provider\r\n            value=\r\n            {updateContextValue}\r\n        >\r\n            {props.children}\r\n        </UpdateContext.Provider>\r\n    )\r\n}","D:\\frontend\\Projects\\picully\\src\\views\\About.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\AuthRoute.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\console\\imageData.js",[],"D:\\frontend\\Projects\\picully\\src\\hooks\\useAlbums.js",["246"],"import { useEffect, useState } from \"react\"\r\nimport { useFire } from \"../contexts/FirebaseContext\"\r\n\r\nconst useAlbums = (id) => {\r\n  \r\n\tconst [albums, setAlbums] = useState([])\r\n\tconst [loading, setLoading] = useState(true)\r\n  const {db} = useFire()\r\n\r\n\tuseEffect(() => {\r\n\t\tconst unsubscribe = db.collection('albums').onSnapshot(snapshot => {\r\n\t\t\tsetLoading(true)\r\n\t\t\tconst snapshotAlbums = []\r\n\t\t\tsnapshot.forEach(doc => {\r\n\t\t\t\tif(id === doc.owner_id){\r\n\t\t\t\t\tconsole.log(\"TRUE\")\r\n\t\t\t\t}\r\n\t\t\t\tsnapshotAlbums.push({\r\n\t\t\t\t\tid: doc.id,\r\n\t\t\t\t\t...doc.data(),\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tsetAlbums(snapshotAlbums)\r\n\t\t\tsetLoading(false)\r\n\t\t})\r\n\r\n\t\treturn unsubscribe\r\n\t}, [])\r\n\r\n\treturn { albums, loading }\r\n}\r\n\r\nexport default useAlbums\r\n","D:\\frontend\\Projects\\picully\\src\\components\\forms\\UploadImage.js",["247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],"import { Box, Flex, Input, Button, InputGroup, InputRightElement, InputRightAddon, Progress, Heading, Image } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useFire } from '../../contexts/FirebaseContext'\r\nimport firebase from 'firebase'\r\n\r\nimport { useAuth } from '../../contexts/AuthContext'\r\n\r\nimport { useUpdate } from '../../contexts/UpdateContext'\r\n\r\n\r\nconst UploadImage = ({albumId}) => {\r\n  \r\n  const [imageToUpload, setImageToUpload] = useState()\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [imagesToUpload, setImagesToUpload] = useState([])\r\n\tconst [uploadProgress, setUploadProgress] = useState(null);\r\n  const [uploadedImage, setUploadedImage] = useState(null);\r\n  \r\n\tconst [error, setError] = useState(null);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\tconst { currentUser } = useAuth()\r\n  const { db, storage, timestamp, firestoreFunctions } = useFire()\r\n  const {setIsUploaded} = useUpdate()\r\n  const [preview, setPreview] = useState()\r\n\r\n  const [previewArr, setPreviewArr] = useState()\r\n\r\n  const onUpload = (e, id) => {\r\n    e.preventDefault()\r\n    const types = [\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/svg\"]\r\n    let image = e.target.files[0]\r\n\r\n\t\tif (!image || !types.includes(image.type)) {\r\n\t\t\tsetUploadProgress(null);\r\n      setUploadedImage(null);\r\n      setIsUploaded(false)\r\n\t\t\tsetError(null);\r\n\t\t\tsetIsSuccess(false);\r\n\r\n\t\t\treturn;\r\n    }\r\n    setIsUploaded(false)\r\n\t\tsetError(null);\r\n\t\tsetIsSuccess(false);\r\n    const fileRef = storage.ref(`images/${currentUser.uid}/${image.name}`);\r\n\t\tconst uploadTask = fileRef.put(image);\r\n\r\n\t\tuploadTask.on('state_changed', taskSnapshot => {\r\n\t\t\tsetUploadProgress(Math.round((taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100));\r\n\t\t});\r\n\r\n\t\tuploadTask.then(async snapshot => {\r\n\r\n      const url = await snapshot.ref.getDownloadURL();\r\n  \r\n\t\t\t// add uploaded file to db\r\n\t\t\tconst img = {\r\n        title: image.name,\r\n\t\t\t\towner: currentUser.uid,\r\n\t\t\t\tpath: snapshot.ref.fullPath,\r\n\t\t\t\tsize: image.size,\r\n        type: image.type,\r\n        createdAt: timestamp(),\r\n        id,\r\n\t\t\t\turl,\r\n\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\tif (albumId) {    \r\n        img.albums = []\r\n        img.albums.push( db.collection('albums').doc(id))\r\n      }\r\n\r\n\t\t\t// add image to collection\r\n      await db.collection('images').add(img).then(function(docRef) {\r\n      docRef.update({\r\n        id: docRef.id\r\n      })\r\n      console.log(\"Document written with ID: \", img);\r\n      \r\n       })\r\n      .catch(function(error) {\r\n      console.error(\"Error adding document: \", error);\r\n     })\r\n  \r\n      // add uid as id to pic\r\n      \r\n      \r\n    \r\n\r\n\r\n      \r\n\r\n\r\n\r\n      // await db.collection(\"albums\").doc(albumId).get().then(snapshot => {\r\n      //   snapshot.forEach(doc => {\r\n      //     doc.data().images.push(img.path)\r\n      //   })\r\n      // })\r\n\t\t\t// let user know we're done\r\n\t\t\tsetIsSuccess(true);\r\n\t\t\tsetUploadProgress(null);\r\n\r\n\t\t\t// file has been added to db, refresh list of files\r\n\t\t\tsetUploadedImage(img);\r\n      setIsSuccess(true);\r\n      e.target.files[0] = \"\";\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(\"File upload triggered an error!\", error);\r\n\t\t\tsetError({\r\n\t\t\t\ttype: \"warning\",\r\n\t\t\t\tmsg: `Image could not be uploaded due to an error (${error.code})`\r\n\t\t\t});\r\n    });\r\n\t}\r\n\r\n  \r\n  useEffect(() => {\r\n    console.log(\"i\")\r\n   if(isSuccess) {\r\n     setImageToUpload({})\r\n     setIsUploaded(true)\r\n   }\r\n   else if(error) {\r\n     console.log(error)\r\n   }\r\n  }, [isSuccess, error, uploadProgress, isSubmitting])\r\n\r\n//TODO fix the previews\r\n\r\n\r\n//   useEffect(() => {\r\n//     if (!imageToUpload && !imagesToUpload) {\r\n//         setPreview(undefined)\r\n//         return\r\n//     }\r\n//     else if (imagesToUpload.length) {\r\n//       let itemWithUrlArr = imagesToUpload.map(itm => itm.url = URL.createObjectURL(itm))\r\n//       console.log(\"URLS\", itemWithUrlArr)\r\n//       setPreviewArr(itemWithUrlArr)\r\n//     }\r\n//     else if(imageToUpload) {\r\n//       const objectUrl = URL.createObjectURL(imageToUpload)\r\n//       let tmpObj = {url: objectUrl}\r\n//       setPreview(tmpObj.url)\r\n//       console.log(preview, \"single\")\r\n//     }\r\n\r\n\r\n//     // free memory when ever this component is unmounted\r\n//     return () => URL.revokeObjectURL(preview)\r\n// }, [imageToUpload])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <Flex justify=\"center\" align=\"center\">\r\n          <InputGroup display=\"flex\" justifyContent=\"center\" alignItems=\"center\" >\r\n            <Input  pt=\"5px\"type=\"file\" onChange={(e) => onUpload(e, albumId)} w=\"400px\" textAlign=\"center\" />\r\n            <InputRightAddon bg=\"teal.400\" color=\"white\" cursor=\"pointer\" _hover={{backgroundColor: \"teal.200\", color: \"white\"}}>\r\n                Submit\r\n            </InputRightAddon>\r\n          </InputGroup> \r\n        </Flex>\r\n      </form>\r\n      {uploadProgress !== null && <Progress colorScheme=\"teal\" size=\"md\" value={uploadProgress}/>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UploadImage\r\n",["264","265"],"D:\\frontend\\Projects\\picully\\src\\components\\Cards\\AlbumCard.js",["266","267","268","269","270","271","272","273","274"],"D:\\frontend\\Projects\\picully\\src\\hooks\\useAlbum.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\ImageGrid.js",["275","276","277","278","279","280","281","282","283"],"\r\nimport { AddIcon } from '@chakra-ui/icons';\r\nimport { Grid, GridItem, Image, Text, Button, CloseButton, Checkbox, Flex, Box, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, useDisclosure, ModalFooter, Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverArrow, PopoverCloseButton, PopoverBody } from '@chakra-ui/react'\r\nimport { useEffect, useState, useRef } from 'react';\r\n\r\nimport { useFire } from '../../contexts/FirebaseContext';\r\nimport { useUpdate } from '../../contexts/UpdateContext';\r\nimport CreateNewAlbumFromPickedImages from '../forms/CreateNewAlbumFromPickedImages';\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ImageGrid = ({albumId}) => {\r\n  const {db, storage} = useFire()\r\n \r\n  const {isUploaded} = useUpdate()\r\n  const {imagesInCurrentAlbum, imageDeleted, setImageDeleted,currentAlbum, setPickedImages, pickedImages, albumToShare , setAlbumToShare, setSharedUrl, sharedUrl, discardedImages, setDiscardedImages,setSharedImages} = useUpdate()\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  const [checkers, setCheckers] = useState([])\r\n\r\n  const navigate = useNavigate()\r\n  const checkBoxPickedRef = useRef(null)\r\n  const checkBoxDiscardRef = useRef(null)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleReviewLink = () => {\r\n    let uniqNum = uuidv4()\r\n    let url = `/picully/${uniqNum}`;\r\n    setSharedUrl(url)\r\n  };\r\n\r\n\r\n\tconst handleDeleteImage = async (img) => {\r\n    console.log(img)\r\n    // eslint-disable-next-line no-restricted-globals\r\n    let ref = db.collection('images').where(\"albums\", \"array-contains\", currentAlbum.id)\r\n    ref.get().then(function(querySnapshot) {\r\n      querySnapshot.forEach(function(doc) {\r\n        doc.ref.delete()\r\n      });\r\n    });\r\n    await ref.delete();\r\n    await storage.ref(img.path).delete();\r\n     setImageDeleted(true)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    imagesInCurrentAlbum.map((img, i) => {\r\n      let imageItem = {\r\n        id: i,\r\n        image: img,\r\n        picked: false,\r\n        discarded: false,\r\n      }\r\n      setCheckers(prevChecks => [...prevChecks, imageItem])\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n  }, [imageDeleted])\r\n\r\n  useEffect(() => {\r\n  }, [isUploaded, currentAlbum.id])\r\n\r\n\r\n  const handlePickImage = async (e, item) => {\r\n    let filterChecks = checkers.map(check => check)\r\n    if(filterChecks.includes(item)){\r\n      filterChecks.forEach(obj => {\r\n        if(!obj.picked && obj.id === item.id) {\r\n          obj.picked = true\r\n          setPickedImages(prevItems => [...prevItems, obj.image])\r\n          console.log(pickedImages, \"added\")\r\n        }\r\n        else if(obj.picked && obj.id === item.id ) {\r\n          obj.picked = false\r\n          setPickedImages(pickedImages.filter(obj => !pickedImages.includes(obj)))\r\n          console.log(pickedImages, \"popped\")\r\n        }\r\n      })\r\n    }\r\n    setCheckers(filterChecks)\r\n  }\r\n\r\n\r\n  \r\n  const handleDiscardimage = async (e, item) => {\r\n    let filterChecks = checkers.map(check => check)\r\n    if(filterChecks.includes(item)){\r\n      filterChecks.forEach(obj => {\r\n        if(!obj.discarded && obj.id === item.id) {\r\n          obj.discarded = true\r\n          setDiscardedImages(prevItems => [...prevItems, item])\r\n          console.log(pickedImages, \"added\")\r\n        }\r\n        else if(obj.discarded && obj.id === item.id ) {\r\n          obj.discarded = false\r\n          setDiscardedImages(discardedImages.filter(obj => !discardedImages.includes(obj)))\r\n          console.log(discardedImages, \"popped\")\r\n        }\r\n      })\r\n    }\r\n    setCheckers(filterChecks)\r\n  }\r\n\r\n\r\n  const handleNewAlbum = async () => {\r\n    onOpen()\r\n  }\r\n\r\n  const handleShareAlbum = (album) => {\r\n    handleReviewLink()\r\n    setAlbumToShare(album)\r\n    if(pickedImages.length){\r\n      setSharedImages(pickedImages)\r\n    }\r\n    navigate(`${sharedUrl}`)\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Flex key={uuidv4()} justify=\"flex-end\" align=\"center\" width=\"100%\" mt=\"2rem\" mb=\"1rem\">\r\n        <Flex key={uuidv4()} justify=\"space-between\" w=\"400px\">\r\n        <Text key={uuidv4()} >Add images to new album</Text>\r\n        <Button key={uuidv4()}  mr=\"2rem\" w=\"80px\" h=\"30px\" colorScheme=\"teal\" onClick={handleNewAlbum}>\r\n          <AddIcon key={uuidv4()} h={6} w={6} colorScheme=\"teal\" />\r\n        </Button>\r\n          <>\r\n            <Modal\r\n              key={uuidv4()}\r\n              closeOnOverlayClick={false}\r\n              isOpen={isOpen}\r\n              onClose={onClose}\r\n            >\r\n            <ModalOverlay/>\r\n            <ModalContent key={uuidv4()} >\r\n            <Flex key={uuidv4()} justifyContent=\"center\" alignItems=\"center\" direction=\"column\">\r\n              <ModalHeader>Create new album</ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody pb={6}>\r\n                <Flex justify=\"center\" align=\"center\">\r\n                  <CreateNewAlbumFromPickedImages pictures={pickedImages}/>\r\n               </Flex>\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n              </ModalFooter>\r\n            </Flex>\r\n            </ModalContent>\r\n          </Modal>\r\n        </>\r\n      </Flex>\r\n      <Flex justify=\"center\" align=\"center\" w=\"400px\">\r\n          <Button mr=\"1rem\" w=\"80px\" h=\"30px\" colorScheme=\"teal\" onClick={() => handleShareAlbum(currentAlbum)}>\r\n            share\r\n          </Button>     \r\n      </Flex>\r\n    </Flex>\r\n    <Grid \r\n      key={uuidv4()}\r\n      mr=\"1rem\"\r\n      ml=\"1rem\" \r\n      templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(5, 1fr)\",]} \r\n      templateRows={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(3, 1fr)\",]} \r\n      mt=\"2rem\" \r\n      gap={8}\r\n      overflowX=\"hidden\"\r\n      h=\"100%\"\r\n      w=\"100%\"\r\n    >\r\n      {\r\n        !imageDeleted && \r\n        imagesInCurrentAlbum !== undefined \r\n        && imagesInCurrentAlbum.length \r\n        && checkers.map((item, i) => (\r\n          <>\r\n            <GridItem \r\n              key={uuidv4()}\r\n              colSpan={1} \r\n              rowSpan={2} \r\n              overflow=\"hidden\"\r\n            >\r\n            <Flex \r\n              key={uuidv4()} \r\n              justify=\"space-between\" \r\n              align=\"center\" \r\n              flexBasis=\"0\" \r\n            >\r\n            { currentAlbum !== albumToShare &&\r\n            <CloseButton \r\n              key={uuidv4()} \r\n              id={item.image.albums[albumId]}  \r\n              size=\"sm\" \r\n              onClick={() => handleDeleteImage(item.image)} \r\n            /> \r\n            }\r\n            <Text\r\n              key={uuidv4()}\r\n              isTruncated\r\n              w=\"100%\"\r\n              fontSize=\"sm\" \r\n              textAlign=\"center\" \r\n              p=\"5px\">{item.image.title}\r\n            </Text>\r\n            </Flex>\r\n            <Box key={uuidv4()}>\r\n              <Image\r\n                key={uuidv4()}\r\n                src={item.image.url} \r\n                alt={item.image.title} \r\n                h=\"100%\" \r\n                w=\"100%\" \r\n                objectFit=\"contain\"\r\n                p=\"5px\" \r\n              />\r\n            </Box>\r\n            <Flex border=\"3px\" justify=\"space-between\" borderColor=\"red\" key={uuidv4()}>\r\n              <Checkbox\r\n                ref={checkBoxPickedRef}\r\n                isDisabled={checkers[i].discarded}\r\n                isChecked={checkers[i].picked}\r\n                ml=\"5px\"\r\n                size=\"md\"\r\n                id={item.image.id}\r\n                colorScheme=\"green\"\r\n                onChange={(e) => handlePickImage(e, item)}\r\n              >\r\n                pick\r\n              </Checkbox>\r\n              <Checkbox\r\n                ref={checkBoxDiscardRef}\r\n                isDisabled={checkers[i].picked}\r\n                isChecked={checkers[i].discarded}\r\n                ml=\"5px\"\r\n                size=\"md\"\r\n                id={item.image.id}\r\n                colorScheme=\"red\"\r\n                onChange={(e) => handleDiscardimage(e, item)}\r\n              >\r\n                Discard\r\n              </Checkbox> \r\n            </Flex>\r\n          </GridItem>\r\n          </>\r\n        ))\r\n      }\r\n    </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImageGrid","D:\\frontend\\Projects\\picully\\src\\components\\Cards\\ImageCard.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\album\\AlbumGrid.js",["284","285"],"import {Flex, Link, Grid, GridItem, Text, Image } from '@chakra-ui/react'\r\nimport tempImage from '../../images/dog.jpg'\r\nimport {Link as ReactLink} from 'react-router-dom'\r\nimport { useUpdate } from '../../contexts/UpdateContext'\r\n\r\nconst AlbumGrid = () => {\r\n  const {currentUserAlbums, imagesInCurrentAlbum, setCurrentAlbum, setCurrentAlbumId} = useUpdate()\r\n\r\n\r\n  const setAlbumClicked = (album) => {\r\n    setCurrentAlbum(album)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid \r\n        pr=\"10px\" \r\n        pl=\"10px\" \r\n        pb=\"10px\" \r\n        templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(5, 1fr)\",]} \r\n        templateRows={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(2, 1fr)\",]} \r\n        gap={3} h=\"600px\" \r\n      >\r\n      {\r\n        currentUserAlbums !== undefined && currentUserAlbums.length && \r\n        currentUserAlbums.map((album, index) => (\r\n          <Link \r\n          as={ReactLink} \r\n          to={`/console/albums/${album.slug}`} \r\n          key={index}\r\n          onClick={() => setAlbumClicked(album)}\r\n          textDecoration=\"none\" \r\n          _hover={{backgroundColor: \"lightgrey\"}}\r\n          > \r\n            <GridItem \r\n            p=\"2rem\" \r\n            colSpan={1} \r\n            overflow=\"hidden\" >\r\n              <Flex \r\n              justify=\"center\" \r\n              align=\"center\" \r\n              direction=\"column\"\r\n              >\r\n              <Text\r\n              isTruncated\r\n              as=\"i\" \r\n              fontSize=\"sm\" \r\n              textAlign=\"center\" \r\n              p=\"5px\" mt=\"1rem\" \r\n              textDecor=\"none\"\r\n              >\r\n                name: {album.title}\r\n              </Text>\r\n              <Text\r\n               isTruncated\r\n              as=\"i\" \r\n              fontSize=\"sm\" \r\n              textAlign=\"center\" \r\n              p=\"5px\" \r\n              mt=\"1rem\" \r\n              textDecor=\"none\"\r\n              >\r\n                description: {album.description}\r\n              </Text>\r\n              <Image \r\n                src={tempImage} \r\n                alt={album.name} \r\n                h=\"400px\" \r\n                w=\"300px\" \r\n                objectFit=\"contain\"\r\n                />\r\n              </Flex>\r\n            </GridItem>\r\n          </Link>\r\n        ))\r\n      }\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AlbumGrid\r\n","D:\\frontend\\Projects\\picully\\src\\components\\album\\Album.js",["286","287","288","289"],"import React, { useEffect, useState } from 'react'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport UploadImage from '../forms/UploadImage'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { Flex, Heading, Input, Spinner, Text } from '@chakra-ui/react'\r\n\r\nimport ImageGrid from '../pictureItems/ImageGrid'\r\nimport { useFire } from '../../contexts/FirebaseContext'\r\nimport {GrEdit} from 'react-icons/gr'\r\nimport {CheckIcon} from '@chakra-ui/icons'\r\nimport { useUpdate } from '../../contexts/UpdateContext'\r\n\r\n\r\n\r\nconst Album = () => {\r\n  const  {slug} = useParams()\r\n  const navigate = useNavigate()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const {firebaseFunctions, db, updatedAlbumTitle} = useFire()\r\n  const { \r\n          imageDeleted,\r\n          isUploaded, \r\n          currentAlbum,\r\n          imagesInCurrentAlbum,\r\n          setCurrentAlbum,\r\n          setImagesInCurrentAlbum} = useUpdate()\r\n  const [editAlbumName, setEditAlbumName] = useState(false)\r\n  const [editActive, setEditActive] = useState(false)\r\n  const {currentUser} = useAuth()\r\n\r\n  useEffect(() => {\r\n  (async () => {\r\n    if(currentAlbum === undefined || !currentAlbum){\r\n      await db.collection(\"albums\").where(\"slug\", \"==\", slug).get().then(querySnapshot => {\r\n        let currAlb = \"\";\r\n        querySnapshot.forEach(doc => {\r\n          currAlb = doc.data()\r\n        })\r\n        setCurrentAlbum(currAlb)\r\n      })\r\n    } \r\n  })()\r\n \r\n}, [])\r\n\r\n  const fetchImages = async (id) => {\r\n    try {\r\n    await db.collection(\"images\").where(\"albums\", \"array-contains\", db.collection(\"albums\").doc(id)).get().then(snapshot => {\r\n      setIsLoading(true)\r\n      let imgArr = []\r\n      snapshot.forEach(doc => {\r\n        imgArr.push(doc.data())\r\n      })\r\n      setImagesInCurrentAlbum([...imgArr])\r\n      setIsLoading(false)\r\n    })\r\n  }\r\n  catch {\r\n    console.log(\"error\")\r\n  }\r\n  \r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    (async () => {\r\n      setImagesInCurrentAlbum(\"\")\r\n      setIsLoading(true)\r\n\r\n      if(currentAlbum) {\r\n          setCurrentAlbum(currentAlbum)\r\n          fetchImages(currentAlbum.id)\r\n          setIsLoading(false)\r\n      }\r\n      else {\r\n        console.error(\"no id found\")\r\n      }\r\n\r\n    })()\r\n    \r\n  }, [imageDeleted, isUploaded, currentAlbum])\r\n\r\n\r\n\r\n  const handleEdit = () => {\r\n    setEditActive(true) \r\n  }\r\n\r\n\r\n  const handleChangeAlbumName = (e) => {\r\n      setEditAlbumName(e.target.value)\r\n  }\r\n\r\n  const handleFinishedEdit = async ()=> {\r\n    if(!editAlbumName) {\r\n      return \r\n    }\r\n   await firebaseFunctions.updateAlbumName(currentAlbum.id, editAlbumName)\r\n    setEditActive(false)\r\n  }\r\n\r\n useEffect(() => {\r\n\r\n }, [updatedAlbumTitle])\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n     { currentAlbum !== undefined &&\r\n\r\n      <Flex \r\n        direction=\"column\" \r\n        mt=\"3rem\">\r\n        { currentAlbum !== undefined && !isLoading &&\r\n        <UploadImage \r\n          albumId={currentAlbum.id !== undefined && currentAlbum.id } \r\n        /> }\r\n        <Flex \r\n          justify=\"center\" \r\n          align=\"center\" \r\n          direction=\"column\"\r\n        >     \r\n          <Text>Edit album name</Text>\r\n            <Flex \r\n              justify=\"space-around\" \r\n              align=\"center\" \r\n            >\r\n              {editActive &&\r\n                  <Flex \r\n                    justify=\"center\" \r\n                    align=\"center\"\r\n                  >\r\n                    <Input \r\n                      type=\"text\" \r\n                      placeholder={editAlbumName} \r\n                      onChange={handleChangeAlbumName}\r\n                      />\r\n                  </Flex> }\r\n              { !editActive ? \r\n              <Flex \r\n                justify=\"center\" \r\n                cursor=\"pointer\" \r\n                align=\"center\" \r\n                _hover={{backgroundColor: \"teal.300\"}} \r\n                >\r\n                <GrEdit \r\n                  color=\"white\" \r\n                  size={\"1.2rem\"} \r\n                  onClick={handleEdit}  />\r\n              </Flex>\r\n              : \r\n              <Flex \r\n              ml=\"1rem\" \r\n              justify=\"center\" \r\n              cursor=\"pointer\" \r\n              align=\"center\">\r\n                <CheckIcon  \r\n                  _hover={{color: \"teal.300\"}}\r\n                  w={6} \r\n                  h={6} \r\n                  color=\"teal.500\" \r\n                  onClick={handleFinishedEdit} \r\n                /> \r\n              </Flex>}\r\n            </Flex>\r\n                <Heading >{editAlbumName ? editAlbumName : currentAlbum.title }</Heading>        \r\n          </Flex>\r\n          {\r\n          isLoading \r\n          ?\r\n          <Flex \r\n            justify=\"center\" \r\n            align=\"center\"\r\n          >\r\n          <Spinner   \r\n            thickness=\"6px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"teal.500\"\r\n            size=\"xl\"  \r\n          />\r\n          </Flex>\r\n          : \r\n          (imagesInCurrentAlbum !== undefined && imagesInCurrentAlbum.length \r\n          ? \r\n          <ImageGrid images={imagesInCurrentAlbum} albumId={currentAlbum.id} />\r\n          :\r\n\r\n          <Flex justify=\"center\" align=\"center\">\r\n            <Text as=\"i\" mt=\"2rem\">here be dragons</Text>\r\n          </Flex>)\r\n        }\r\n\r\n      </Flex>\r\n      }\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Album\r\n\r\n","D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\previewImageGrid.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\PreviewImageGrid.js",["290","291"],"import { Grid, GridItem, Heading, Image, Text } from '@chakra-ui/react'\r\nimport React from 'react'\r\n\r\nconst \r\nPreviewImageGrid = ({images, previewURLS}) => {\r\n  return (\r\n    <Grid templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(5, 1fr)\",]} templateRows={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(2, 1fr)\",]} gap={3} h=\"600px\">\r\n    {\r\n      previewURLS !== undefined && previewURLS.length && \r\n      previewURLS.map((prevItem, index) => (\r\n      \r\n          <GridItem p=\"2rem\" colSpan={1} overflow=\"hidden\" colStart={2} key={index}>\r\n            <Image src={prevItem.url} alt={prevItem.title} h=\"400px\" w=\"300px\" objectFit=\"contain\"/>     \r\n          </GridItem>\r\n      ))\r\n    }\r\n  </Grid>\r\n  )\r\n}\r\n\r\nexport default PreviewImageGrid\r\n",["292","293"],"D:\\frontend\\Projects\\picully\\src\\components\\album\\Albums.js",["294","295","296","297","298","299"],"import {Flex, Heading, Spinner, Link, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Button, useDisclosure } from '@chakra-ui/react'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {Link as ReactLink} from 'react-router-dom'\r\n\r\nimport CreateNewAlbumFromPickedImages from '../forms/CreateNewAlbumFromPickedImages'\r\n\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { useFire } from '../../contexts/FirebaseContext'\r\nimport { useUpdate } from '../../contexts/UpdateContext'\r\nimport useAlbums from '../../hooks/useAlbums'\r\nimport ImageGrid from '../pictureItems/ImageGrid'\r\nimport AlbumGrid from './AlbumGrid'\r\n\r\nconst Albums = () => {\r\n\r\n  const { isLoading, images, updatedAlbumTitle} = useFire()\r\n  const {currentUserAlbums} = useUpdate()\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n\r\n  useEffect(() => {\r\n\r\n  }, [updatedAlbumTitle])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Flex justify=\"center\" align=\"center\" w=\"100%\" mt=\"2rem\" direction=\"column\">\r\n        <Heading pt=\"1rem\" >\r\n          {currentUserAlbums.length ? \"Your Albums\" : \"Create new albums\"}\r\n        </Heading>\r\n        <>\r\n          <Button mr=\"2rem\" w=\"80px\" h=\"30px\" colorScheme=\"teal\" onClick={onOpen}>\r\n           +\r\n          </Button>\r\n          <Modal\r\n            closeOnOverlayClick={false}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n          >\r\n            <ModalOverlay  />\r\n            <ModalContent >\r\n            <Flex justifyContent=\"center\" alignItems=\"center\" direction=\"column\">\r\n              <ModalHeader>Create new album</ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody pb={6}>\r\n                <Flex justify=\"center\" align=\"center\">\r\n                  <CreateNewAlbumFromPickedImages />\r\n               </Flex>\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n              </ModalFooter>\r\n            </Flex>\r\n            </ModalContent>\r\n          </Modal>\r\n        </>\r\n      </Flex>\r\n\r\n\t\t\t{\r\n\t\t\t\tisLoading && currentUserAlbums.length \r\n\t\t\t\t\t? (\r\n          <Flex justify=\"center\" align=\"center\" mt=\"1rem\" key={214124}>\r\n            <Spinner   \r\n            thickness=\"4px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"teal.500\"\r\n            size=\"xl\"  />\r\n          </Flex>)\r\n\t\t\t\t\t: currentUserAlbums.length && (<AlbumGrid albums={currentUserAlbums} images={images} />)\r\n\t\t\t}\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Albums\r\n","D:\\frontend\\Projects\\picully\\src\\hooks\\useUploadImage.js",["300","301","302"],"import { useState, useEffect } from 'react';\r\nimport { boolean } from 'yup/lib/locale';\r\n\r\nimport { useAuth } from '../contexts/AuthContext'\r\nimport { useFire } from '../contexts/FirebaseContext';\r\n\r\nconst useUploadImage = (image, albumId, userId) => {\r\n\tconst [uploadProgress, setUploadProgress] = useState(null);\r\n\tconst [uploadedImage, setUploadedImage] = useState(null);\r\n\tconst [error, setError] = useState(null);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  \r\n\tconst { currentUser } = useAuth()\r\n  const { db, storage, timestamp } = useFire()\r\n\r\n   const onUpload = () => {\r\n\r\n\t\tif (!image) {\r\n\t\t\tsetUploadProgress(null);\r\n\t\t\tsetUploadedImage(null);\r\n\t\t\tsetError(null);\r\n\t\t\tsetIsSuccess(false);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// reset environment\r\n\t\tsetError(null);\r\n\t\tsetIsSuccess(false);\r\n\r\n    // get file reference\r\n    const fileRef = storage.ref(`images/${currentUser.uid}/${image.name}`);\r\n\r\n\t\t// upload image to fileRef\r\n\t\tconst uploadTask = fileRef.put(image);\r\n\r\n\t\t// attach listener for `state_changed`-event\r\n\t\tuploadTask.on('state_changed', taskSnapshot => {\r\n\t\t\tsetUploadProgress(Math.round((taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100));\r\n\t\t});\r\n\r\n\t\t// are we there yet?\r\n\t\tuploadTask.then(async snapshot => {\r\n\r\n\t\t\t// retrieve URL to uploaded file\r\n\t\t\tconst url = await snapshot.ref.getDownloadURL();\r\n\t\t\t\r\n\t\r\n\t\t\t// add uploaded file to db\r\n\t\t\tconst img = {\r\n\t\t\t\ttitle: image.name,\r\n\t\t\t\talbum: image.ablumId,\r\n\t\t\t\towner: userId ? userId : currentUser.uid,\r\n\t\t\t\tpath: snapshot.ref.fullPath,\r\n\t\t\t\tsize: image.size,\r\n\t\t\t\ttype: image.type,\r\n\t\t\t\tcreatedAt: (image.createdAt = timestamp()),\r\n\t\t\t\tid: \r\n\t\t\t\turl,\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (albumId) {\r\n\t\t\t\timg.album = db.collection('albums').doc(albumId)\r\n\t\t\t}\r\n\r\n\t\t\tif(userId) {\r\n\t\t\t\timg.userId = db.collection('users').doc(userId)\r\n\t\t\t}\r\n\r\n\t\t\t// add image to collection\r\n\t\t\tawait db.collection('images').add(img)\r\n\r\n\t\t\t// let user know we're done\r\n\t\t\tsetIsSuccess(true);\r\n\t\t\tsetUploadProgress(null);\r\n\r\n\t\t\t// file has been added to db, refresh list of files\r\n\t\t\tsetUploadedImage(img);\r\n\t\t\tsetIsSuccess(true);\r\n\t\t\tconsole.error(\"SUCCESS\", img);\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(\"File upload triggered an error!\", error);\r\n\t\t\tsetError({\r\n\t\t\t\ttype: \"warning\",\r\n\t\t\t\tmsg: `Image could not be uploaded due to an error (${error.code})`\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t}\r\n\r\n\treturn { uploadProgress, uploadedImage, error, isSuccess };\r\n}\r\n\r\nexport default useUploadImage;\r\n","D:\\frontend\\Projects\\picully\\src\\hooks\\useDelete.js",["303"],"D:\\frontend\\Projects\\picully\\src\\components\\forms\\CreateAlbumForm.js",["304","305","306","307"],"import {useNavigate} from 'react-router-dom'\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  Button,\r\n  Box,\r\n  Flex,\r\n  Heading, \r\n} from \"@chakra-ui/react\"\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport {  useFire } from '../../contexts/FirebaseContext';\r\nimport { useState } from 'react';\r\nimport firebase from'firebase/app'\r\n\r\n//Yup Validation schema for signing in\r\nconst CreateAlbumSchema = Yup.object().shape({\r\n  //email validation rules\r\n  name: Yup.string()\r\n  .trim()\r\n  .min(2, 'must be minimum och 2 characters')\r\n  .max(140, 'max name length is 140 chars')\r\n  .required('Please enter a valid album name'),\r\n  //pw validation rules\r\n  description: Yup.string()\r\n  .min(4, 'must be minimum och 2 characters')\r\n  .required('enter a short description')\r\n\r\n})\r\n\r\nconst CreateAlbumForm = (pickedImages) => {\r\n  const navigate= useNavigate()\r\n  const { currentUser } = useAuth()\r\n  const {firebaseFunctions, isLoading} = useFire()\r\n  const {timestamp,db} = useFire()\r\n  const [error, setError] = useState(\"\")\r\n\r\n  return (\r\n  <>\r\n    <Box p=\"1rem\" mt=\"3rem\">\r\n      <Heading>Create a new album</Heading>\r\n    </Box>\r\n    <Flex \r\n    justify=\"center\" \r\n    align=\"center\" \r\n    minW={[\"sm\", \"md\", \"lg\", \"xl\"]}\r\n    minH={[\"sm\", \"md\", \"lg\", \"xl\"]}\r\n    pb=\"10rem\"\r\n    >\r\n        <Formik\r\n        initialValues={{\r\n          name: '',\r\n          description: '',\r\n          owner: currentUser.uid,\r\n          id: '',\r\n        }}\r\n        validationSchema={CreateAlbumSchema}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          try { \r\n            if(!pickedImages.length || pickedImages === undefined) {\r\n              await firebaseFunctions.createAlbum(values.name, values.description, values.owner, values.id) // \r\n              setSubmitting(false)\r\n              navigate('/console/albums')\r\n            }\r\n            else {\r\n              await pickedImages.forEach((image) => {\r\n                db.collection(\"images\")\r\n                .doc(image.id)\r\n                .update({\r\n                albums: firebase.firestore.FieldValue.arrayUnion(\r\n                db.collection(\"albums\").doc(pickedImages.id)\r\n                ),\r\n                });\r\n                });\r\n            }        \r\n\r\n        } catch (err) {\r\n            console.log('error', err)\r\n        }\r\n        }}\r\n      >\r\n          {(props) => (\r\n            \r\n            <Form >\r\n              <Field name=\"name\">\r\n                {({ field, form }) => (\r\n                  <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]} mt={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                    <FormControl isInvalid={form.errors.name && form.touched.name} isRequired>\r\n                      <FormLabel color=\"white\" htmlFor=\"name\" p={[\"sm\", \"md\", \"lg\", \"xl\"]}>name</FormLabel>\r\n                      <Input \r\n                        {...field}\r\n                        focusBorderColor=\"white\"\r\n                        value={props.values.name}\r\n                        id=\"name\"\r\n                        color=\"white\"\r\n                        type=\"name\"\r\n                        placeholder=\"name\" \r\n                        onChange={props.handleChange} \r\n                        onBlur={props.handleBlur} \r\n                      />\r\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                    </FormControl>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n              <Field name=\"description\">\r\n                {({ field, form }) => (\r\n                  <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]} mt={[\"sm\", \"md\", \"lg\", \"10px\"]}>\r\n                    <FormControl isInvalid={form.errors.description && form.touched.description} isRequired>\r\n                      <FormLabel color=\"white\" htmlFor=\"description\" p={[\"sm\", \"md\", \"lg\", \"xl\"]}>description</FormLabel>\r\n                      <Input \r\n                        {...field}\r\n                        focusBorderColor=\"white\"\r\n                        value={props.values.description}\r\n                        id=\"description\"\r\n                        color=\"white\"\r\n                        type=\"description\"\r\n                        placeholder=\"description\" \r\n                        onChange={props.handleChange} \r\n                        onBlur={props.handleBlur} \r\n                      />\r\n                      <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                    </FormControl>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n              \r\n                <Flex\r\n                justify=\"space-around\"\r\n                align=\"center\"\r\n                direction={[\"row\", \"row\", \"row\", \"row\"]}>\r\n                  <Box>\r\n                    <Button\r\n                      mt={4}\r\n                      background=\"white\"\r\n                      p={[\"20.2px\", \"md\", \"lg\", \"xl\"]}\r\n                      color=\"teal.500\"\r\n                      isLoading={props.isSubmitting}\r\n                      type=\"submit\"\r\n                      >\r\n                      Create Album\r\n                    </Button>\r\n                  </Box>\r\n                </Flex>\r\n            </Form>\r\n        \r\n          )}\r\n        </Formik>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateAlbumForm\r\n","D:\\frontend\\Projects\\picully\\src\\components\\album\\CreateAlbum.js",[],["308","309"],"D:\\frontend\\Projects\\picully\\src\\components\\error\\NotFound.js",[],"D:\\frontend\\Projects\\picully\\src\\components\\forms\\CreateNewAlbumFromPickedImages.js",["310","311","312","313","314","315","316","317"],"import {useNavigate} from 'react-router-dom'\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  Button,\r\n  Box,\r\n  Flex,\r\n  Heading, \r\n} from \"@chakra-ui/react\"\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport {  useFire } from '../../contexts/FirebaseContext';\r\nimport { useState } from 'react';\r\nimport firebase from'firebase/app'\r\nimport { useUpdate } from '../../contexts/UpdateContext';\r\n\r\n//Yup Validation schema for signing in\r\nconst CreateAlbumSchema = Yup.object().shape({\r\n  //email validation rules\r\n  name: Yup.string()\r\n  .trim()\r\n  .min(2, 'must be minimum och 2 characters')\r\n  .max(140, 'max name length is 140 chars')\r\n  .required('Please enter a valid album name'),\r\n  //pw validation rules\r\n  description: Yup.string()\r\n  .min(4, 'must be minimum och 2 characters')\r\n  .required('enter a short description')\r\n\r\n})\r\n\r\nconst CreateAlbumForm = ({pictures}) => {\r\n  const navigate= useNavigate()\r\n  const { currentUser } = useAuth()\r\n  const {pickedImages, currentAlbum} = useUpdate()\r\n  const {firebaseFunctions, isLoading} = useFire()\r\n  const {timestamp,db} = useFire()\r\n  const [error, setError] = useState(\"\")\r\n\r\n\r\n\r\n\r\n  console.log(pictures, \"PICS\", pickedImages, \"context pics\")\r\n  return (\r\n  <>\r\n    <Flex \r\n    justify=\"center\" \r\n    align=\"center\" \r\n    minW={[\"sm\", \"md\", \"lg\", \"xl\"]}\r\n    minH={[\"sm\", \"md\", \"lg\", \"xl\"]}\r\n    pb=\"10rem\"\r\n    >\r\n        <Formik\r\n        initialValues={{\r\n          name: '',\r\n          description: '',\r\n          images: [],\r\n          owner: currentUser.uid,\r\n          slug: '',\r\n          id: '',\r\n        }}\r\n        validationSchema={CreateAlbumSchema}\r\n        onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n          try { \r\n            if(pickedImages !== undefined && pickedImages.length) {\r\n             await firebaseFunctions.createAlbumWithImages(values.name, values.description, values.owner, values.id, pickedImages)\r\n              \r\n                navigate('/console/albums')\r\n                resetForm({})\r\n            }\r\n            else {\r\n              console.log(\"I ELSE RAN\")\r\n              await firebaseFunctions.createAlbum(values.name, values.description, values.owner, values.id) // \r\n              setSubmitting(false)\r\n              navigate('/console/albums')\r\n              resetForm({})\r\n              }      \r\n            } catch (err) {\r\n                console.log('error', err)\r\n            }\r\n            }}\r\n      >\r\n          {(props) => (\r\n            \r\n            <Form >\r\n              <Field name=\"name\">\r\n                {({ field, form }) => (\r\n                  <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]} mt={[\"sm\", \"md\", \"lg\", \"xl\"]}>\r\n                    <FormControl isInvalid={form.errors.name && form.touched.name} isRequired>\r\n                      <FormLabel color=\"teal.500\" htmlFor=\"name\" p={[\"sm\", \"md\", \"lg\", \"xl\"]}>name</FormLabel>\r\n                      <Input \r\n                        {...field}\r\n                        focusBorderColor=\"teal.500\"\r\n                        value={props.values.name}\r\n                        id=\"name\"\r\n                        color=\"teal.500\"\r\n                        type=\"name\"\r\n                        placeholder=\"name\" \r\n                        onChange={props.handleChange} \r\n                        onBlur={props.handleBlur} \r\n                      />\r\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                    </FormControl>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n              <Field name=\"description\">\r\n                {({ field, form }) => (\r\n                  <Box p={[\"sm\", \"md\", \"lg\", \"xl\"]} mt={[\"sm\", \"md\", \"lg\", \"10px\"]}>\r\n                    <FormControl isInvalid={form.errors.description && form.touched.description} isRequired>\r\n                      <FormLabel color=\"teal.500\" htmlFor=\"description\" p={[\"sm\", \"md\", \"lg\", \"xl\"]}>description</FormLabel>\r\n                      <Input \r\n                        {...field}\r\n                        focusBorderColor=\"teal\"\r\n                        value={props.values.description}\r\n                        id=\"description\"\r\n                        color=\"teal.500\"\r\n                        type=\"description\"\r\n                        placeholder=\"description\" \r\n                        onChange={props.handleChange} \r\n                        onBlur={props.handleBlur} \r\n                      />\r\n                      <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                    </FormControl>\r\n                  </Box>\r\n                )}\r\n              </Field>\r\n              \r\n                  <Box>\r\n                    <Button\r\n                      mt={4}\r\n                      background=\"teal.200\"\r\n                      p={[\"20.2px\", \"md\", \"lg\", \"xl\"]}\r\n                      color=\"teal.500\"\r\n                      isLoading={props.isSubmitting}\r\n                      type=\"submit\"\r\n                      >\r\n                      Create Album\r\n                    </Button>\r\n                  </Box>\r\n              \r\n            </Form>\r\n        \r\n          )}\r\n        </Formik>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateAlbumForm\r\n","D:\\frontend\\Projects\\picully\\src\\components\\album\\SharedAlbum.js",["318","319"],"D:\\frontend\\Projects\\picully\\src\\components\\pictureItems\\SharedImageGrid.js",["320","321"],"\r\nimport { AddIcon } from '@chakra-ui/icons';\r\nimport { Grid, GridItem, Image, Text, Button, Checkbox, Flex, Box, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, useDisclosure, ModalFooter } from '@chakra-ui/react'\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { useUpdate } from '../../contexts/UpdateContext';\r\nimport CreateNewAlbumFromPickedImages from '../forms/CreateNewAlbumFromPickedImages';\r\nimport {v4 as uuidv4} from 'uuid'\r\n\r\n\r\nconst ImageGrid = ({images}) => {\r\n\r\n  const { userSelectedImagesToKeep, setuserSelectedImagesToKeep,\r\n    userSelectedImagesToDelete, setuserSelectedImagesToDelete} = useUpdate()\r\n\r\n  const [checkers, setCheckers] = useState([])\r\n\r\n  const checkBoxPickedRef = useRef(null)\r\n  const checkBoxDiscardRef = useRef(null)\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n  useEffect(() => {\r\n    images.map((img, i) => {\r\n      let imageItem = {\r\n        id: i,\r\n        image: img,\r\n        picked: false,\r\n        discarded: false,\r\n      }\r\n      setCheckers(prevChecks => [...prevChecks, imageItem])\r\n    })\r\n  }, [])\r\n\r\n\r\n  const handlePickImage = async (e, item) => {\r\n    let filterChecks = checkers.map(check => check)\r\n    if(filterChecks.includes(item)){\r\n      filterChecks.forEach(obj => {\r\n        if(!obj.picked && obj.id === item.id) {\r\n          obj.picked = true\r\n          setuserSelectedImagesToKeep(prevItems => [...prevItems, obj.image])\r\n\r\n        }\r\n        else if(obj.picked && obj.id === item.id ) {\r\n          obj.picked = false\r\n          setuserSelectedImagesToKeep(userSelectedImagesToKeep.filter(obj => !userSelectedImagesToKeep.includes(obj)))\r\n\r\n        }\r\n      })\r\n    }\r\n    setCheckers(filterChecks)\r\n  }\r\n\r\n\r\n  \r\n  const handleDiscardimage = async (item) => {\r\n    let filterChecks = checkers.map(check => check)\r\n    if(filterChecks.includes(item)){\r\n      filterChecks.forEach(obj => {\r\n        if(!obj.discarded && obj.id === item.id) {\r\n          obj.discarded = true\r\n          setuserSelectedImagesToDelete(prevItems => [...prevItems, item])\r\n        }\r\n        else if(obj.discarded && obj.id === item.id ) {\r\n          obj.discarded = false\r\n          setuserSelectedImagesToDelete(userSelectedImagesToDelete.filter(obj => !userSelectedImagesToDelete.includes(obj)))\r\n\r\n        }\r\n      })\r\n    }\r\n    setCheckers(filterChecks)\r\n  }\r\n  \r\n  const handleNewAlbum = async () => {\r\n    onOpen()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid \r\n        key={uuidv4()}\r\n        mr=\"1rem\"\r\n        ml=\"1rem\" \r\n        templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(5, 1fr)\",]} \r\n        templateRows={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\",\"repeat(3, 1fr)\",\"repeat(3, 1fr)\",]} \r\n        mt=\"2rem\" \r\n        gap={8}\r\n        overflowX=\"hidden\"\r\n        h=\"100%\"\r\n        w=\"100%\"\r\n      >\r\n      {\r\n\r\n          images !== undefined \r\n        && images.length \r\n        && checkers.map((item, i) => (\r\n          <>\r\n            <Button key={uuidv4()}  mr=\"2rem\" w=\"80px\" h=\"30px\" colorScheme=\"teal\" onClick={handleNewAlbum}>\r\n              <AddIcon key={uuidv4()} h={6} w={6} colorScheme=\"teal\" />\r\n            </Button>\r\n            <Modal\r\n              key={uuidv4()}\r\n              closeOnOverlayClick={false}\r\n              isOpen={isOpen}\r\n              onClose={onClose}\r\n            >\r\n            <ModalOverlay/>\r\n            <ModalContent key={uuidv4()} >\r\n            <Flex key={uuidv4()} justifyContent=\"center\" alignItems=\"center\" direction=\"column\">\r\n              <ModalHeader>Create new album</ModalHeader>\r\n              <ModalCloseButton />\r\n              <ModalBody pb={6}>\r\n                <Flex justify=\"center\" align=\"center\">\r\n                  <CreateNewAlbumFromPickedImages pictures={userSelectedImagesToKeep}/>\r\n               </Flex>\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button onClick={onClose}>Cancel</Button>\r\n              </ModalFooter>\r\n            </Flex>\r\n            </ModalContent>\r\n          </Modal>\r\n        \r\n            <GridItem \r\n              key={uuidv4()}\r\n              colSpan={1} \r\n              rowSpan={2} \r\n              overflow=\"hidden\"\r\n            >\r\n            <Flex \r\n              key={uuidv4()} \r\n              justify=\"space-between\" \r\n              align=\"center\" \r\n              flexBasis=\"0\" \r\n            >\r\n            <Text\r\n              key={uuidv4()}\r\n              isTruncated\r\n              w=\"100%\"\r\n              fontSize=\"sm\" \r\n              textAlign=\"center\" \r\n              p=\"5px\">{item.image.title}\r\n            </Text>\r\n            </Flex>\r\n            <Box key={uuidv4()}>\r\n              <Image\r\n                key={uuidv4()}\r\n                src={item.image.url} \r\n                alt={item.image.title} \r\n                h=\"100%\" \r\n                w=\"100%\" \r\n                objectFit=\"contain\"\r\n                p=\"5px\" \r\n              />\r\n            </Box>\r\n            <Flex border=\"3px\" justify=\"space-between\" borderColor=\"red\" key={uuidv4()}>\r\n              <Checkbox\r\n                ref={checkBoxPickedRef}\r\n                isDisabled={checkers[i].discarded}\r\n                isChecked={checkers[i].picked}\r\n                ml=\"5px\"\r\n                size=\"md\"\r\n                id={item.image.id}\r\n                colorScheme=\"green\"\r\n                onChange={(e) => handlePickImage(e, item)}\r\n              >\r\n                pick\r\n              </Checkbox>\r\n              <Checkbox\r\n                ref={checkBoxDiscardRef}\r\n                isDisabled={checkers[i].picked}\r\n                isChecked={checkers[i].discarded}\r\n                ml=\"5px\"\r\n                size=\"md\"\r\n                id={item.image.id}\r\n                colorScheme=\"red\"\r\n                onChange={(e) => handleDiscardimage(e, item)}\r\n              >\r\n                Discard\r\n              </Checkbox> \r\n            </Flex>\r\n          </GridItem>\r\n          </>\r\n        ))\r\n      }\r\n    </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ImageGrid",{"ruleId":"322","severity":1,"message":"323","line":7,"column":3,"nodeType":"324","messageId":"325","endLine":7,"endColumn":17},{"ruleId":"322","severity":1,"message":"326","line":9,"column":3,"nodeType":"324","messageId":"325","endLine":9,"endColumn":9},{"ruleId":"322","severity":1,"message":"327","line":13,"column":3,"nodeType":"324","messageId":"325","endLine":13,"endColumn":9},{"ruleId":"322","severity":1,"message":"328","line":19,"column":22,"nodeType":"324","messageId":"325","endLine":19,"endColumn":30},{"ruleId":"329","replacedBy":"330"},{"ruleId":"331","replacedBy":"332"},{"ruleId":"329","replacedBy":"333"},{"ruleId":"331","replacedBy":"334"},{"ruleId":"322","severity":1,"message":"335","line":3,"column":10,"nodeType":"324","messageId":"325","endLine":3,"endColumn":25},{"ruleId":"322","severity":1,"message":"336","line":1,"column":42,"nodeType":"324","messageId":"325","endLine":1,"endColumn":51},{"ruleId":"322","severity":1,"message":"337","line":25,"column":19,"nodeType":"324","messageId":"325","endLine":25,"endColumn":29},{"ruleId":"322","severity":1,"message":"323","line":7,"column":3,"nodeType":"324","messageId":"325","endLine":7,"endColumn":17},{"ruleId":"322","severity":1,"message":"327","line":13,"column":3,"nodeType":"324","messageId":"325","endLine":13,"endColumn":9},{"ruleId":"322","severity":1,"message":"338","line":16,"column":3,"nodeType":"324","messageId":"325","endLine":16,"endColumn":10},{"ruleId":"322","severity":1,"message":"339","line":17,"column":3,"nodeType":"324","messageId":"325","endLine":17,"endColumn":17},{"ruleId":"329","replacedBy":"340"},{"ruleId":"331","replacedBy":"341"},{"ruleId":"322","severity":1,"message":"342","line":1,"column":10,"nodeType":"324","messageId":"325","endLine":1,"endColumn":13},{"ruleId":"322","severity":1,"message":"343","line":1,"column":15,"nodeType":"324","messageId":"325","endLine":1,"endColumn":21},{"ruleId":"322","severity":1,"message":"326","line":1,"column":23,"nodeType":"324","messageId":"325","endLine":1,"endColumn":29},{"ruleId":"322","severity":1,"message":"344","line":1,"column":31,"nodeType":"324","messageId":"325","endLine":1,"endColumn":35},{"ruleId":"322","severity":1,"message":"345","line":1,"column":37,"nodeType":"324","messageId":"325","endLine":1,"endColumn":44},{"ruleId":"322","severity":1,"message":"346","line":4,"column":8,"nodeType":"324","messageId":"325","endLine":4,"endColumn":14},{"ruleId":"322","severity":1,"message":"347","line":6,"column":8,"nodeType":"324","messageId":"325","endLine":6,"endColumn":14},{"ruleId":"322","severity":1,"message":"348","line":17,"column":9,"nodeType":"324","messageId":"325","endLine":17,"endColumn":22},{"ruleId":"322","severity":1,"message":"342","line":2,"column":10,"nodeType":"324","messageId":"325","endLine":2,"endColumn":13},{"ruleId":"322","severity":1,"message":"344","line":2,"column":15,"nodeType":"324","messageId":"325","endLine":2,"endColumn":19},{"ruleId":"322","severity":1,"message":"349","line":2,"column":21,"nodeType":"324","messageId":"325","endLine":2,"endColumn":25},{"ruleId":"322","severity":1,"message":"345","line":2,"column":27,"nodeType":"324","messageId":"325","endLine":2,"endColumn":34},{"ruleId":"322","severity":1,"message":"336","line":3,"column":10,"nodeType":"324","messageId":"325","endLine":3,"endColumn":19},{"ruleId":"322","severity":1,"message":"350","line":4,"column":17,"nodeType":"324","messageId":"325","endLine":4,"endColumn":26},{"ruleId":"322","severity":1,"message":"351","line":4,"column":28,"nodeType":"324","messageId":"325","endLine":4,"endColumn":39},{"ruleId":"322","severity":1,"message":"352","line":5,"column":10,"nodeType":"324","messageId":"325","endLine":5,"endColumn":17},{"ruleId":"322","severity":1,"message":"327","line":1,"column":48,"nodeType":"324","messageId":"325","endLine":1,"endColumn":54},{"ruleId":"322","severity":1,"message":"336","line":2,"column":21,"nodeType":"324","messageId":"325","endLine":2,"endColumn":30},{"ruleId":"322","severity":1,"message":"327","line":1,"column":41,"nodeType":"324","messageId":"325","endLine":1,"endColumn":47},{"ruleId":"322","severity":1,"message":"353","line":9,"column":3,"nodeType":"324","messageId":"325","endLine":9,"endColumn":20},{"ruleId":"322","severity":1,"message":"354","line":1,"column":15,"nodeType":"324","messageId":"325","endLine":1,"endColumn":24},{"ruleId":"322","severity":1,"message":"345","line":1,"column":32,"nodeType":"324","messageId":"325","endLine":1,"endColumn":39},{"ruleId":"322","severity":1,"message":"355","line":1,"column":41,"nodeType":"324","messageId":"325","endLine":1,"endColumn":45},{"ruleId":"322","severity":1,"message":"356","line":5,"column":8,"nodeType":"324","messageId":"325","endLine":5,"endColumn":15},{"ruleId":"322","severity":1,"message":"357","line":11,"column":10,"nodeType":"324","messageId":"325","endLine":11,"endColumn":21},{"ruleId":"322","severity":1,"message":"326","line":2,"column":166,"nodeType":"324","messageId":"325","endLine":2,"endColumn":172},{"ruleId":"322","severity":1,"message":"358","line":1,"column":79,"nodeType":"324","messageId":"325","endLine":1,"endColumn":83},{"ruleId":"322","severity":1,"message":"359","line":1,"column":85,"nodeType":"324","messageId":"325","endLine":1,"endColumn":93},{"ruleId":"322","severity":1,"message":"360","line":1,"column":115,"nodeType":"324","messageId":"325","endLine":1,"endColumn":122},{"ruleId":"322","severity":1,"message":"361","line":2,"column":9,"nodeType":"324","messageId":"325","endLine":2,"endColumn":20},{"ruleId":"322","severity":1,"message":"362","line":13,"column":10,"nodeType":"324","messageId":"325","endLine":13,"endColumn":13},{"ruleId":"363","severity":1,"message":"364","line":29,"column":4,"nodeType":"365","endLine":29,"endColumn":6,"suggestions":"366"},{"ruleId":"329","replacedBy":"367"},{"ruleId":"331","replacedBy":"368"},{"ruleId":"322","severity":1,"message":"369","line":2,"column":10,"nodeType":"324","messageId":"325","endLine":2,"endColumn":19},{"ruleId":"363","severity":1,"message":"370","line":61,"column":8,"nodeType":"365","endLine":61,"endColumn":56,"suggestions":"371"},{"ruleId":"363","severity":1,"message":"372","line":74,"column":8,"nodeType":"365","endLine":74,"endColumn":22,"suggestions":"373"},{"ruleId":"363","severity":1,"message":"374","line":29,"column":5,"nodeType":"365","endLine":29,"endColumn":7,"suggestions":"375"},{"ruleId":"322","severity":1,"message":"342","line":1,"column":10,"nodeType":"324","messageId":"325","endLine":1,"endColumn":13},{"ruleId":"322","severity":1,"message":"343","line":1,"column":28,"nodeType":"324","messageId":"325","endLine":1,"endColumn":34},{"ruleId":"322","severity":1,"message":"376","line":1,"column":48,"nodeType":"324","messageId":"325","endLine":1,"endColumn":65},{"ruleId":"322","severity":1,"message":"345","line":1,"column":94,"nodeType":"324","messageId":"325","endLine":1,"endColumn":101},{"ruleId":"322","severity":1,"message":"377","line":1,"column":103,"nodeType":"324","messageId":"325","endLine":1,"endColumn":108},{"ruleId":"322","severity":1,"message":"378","line":4,"column":8,"nodeType":"324","messageId":"325","endLine":4,"endColumn":16},{"ruleId":"322","severity":1,"message":"379","line":13,"column":10,"nodeType":"324","messageId":"325","endLine":13,"endColumn":23},{"ruleId":"322","severity":1,"message":"380","line":14,"column":24,"nodeType":"324","messageId":"325","endLine":14,"endColumn":39},{"ruleId":"322","severity":1,"message":"381","line":15,"column":10,"nodeType":"324","messageId":"325","endLine":15,"endColumn":24},{"ruleId":"322","severity":1,"message":"382","line":15,"column":26,"nodeType":"324","messageId":"325","endLine":15,"endColumn":43},{"ruleId":"322","severity":1,"message":"383","line":17,"column":10,"nodeType":"324","messageId":"325","endLine":17,"endColumn":23},{"ruleId":"322","severity":1,"message":"384","line":22,"column":35,"nodeType":"324","messageId":"325","endLine":22,"endColumn":53},{"ruleId":"322","severity":1,"message":"385","line":24,"column":10,"nodeType":"324","messageId":"325","endLine":24,"endColumn":17},{"ruleId":"322","severity":1,"message":"386","line":24,"column":19,"nodeType":"324","messageId":"325","endLine":24,"endColumn":29},{"ruleId":"322","severity":1,"message":"387","line":26,"column":10,"nodeType":"324","messageId":"325","endLine":26,"endColumn":20},{"ruleId":"322","severity":1,"message":"388","line":26,"column":22,"nodeType":"324","messageId":"325","endLine":26,"endColumn":35},{"ruleId":"363","severity":1,"message":"389","line":127,"column":6,"nodeType":"365","endLine":127,"endColumn":54,"suggestions":"390"},{"ruleId":"329","replacedBy":"391"},{"ruleId":"331","replacedBy":"392"},{"ruleId":"322","severity":1,"message":"393","line":3,"column":10,"nodeType":"324","messageId":"325","endLine":3,"endColumn":18},{"ruleId":"322","severity":1,"message":"394","line":4,"column":10,"nodeType":"324","messageId":"325","endLine":4,"endColumn":15},{"ruleId":"322","severity":1,"message":"344","line":4,"column":22,"nodeType":"324","messageId":"325","endLine":4,"endColumn":26},{"ruleId":"322","severity":1,"message":"395","line":4,"column":35,"nodeType":"324","messageId":"325","endLine":4,"endColumn":40},{"ruleId":"322","severity":1,"message":"336","line":5,"column":17,"nodeType":"324","messageId":"325","endLine":5,"endColumn":26},{"ruleId":"322","severity":1,"message":"328","line":5,"column":28,"nodeType":"324","messageId":"325","endLine":5,"endColumn":36},{"ruleId":"322","severity":1,"message":"369","line":6,"column":10,"nodeType":"324","messageId":"325","endLine":6,"endColumn":19},{"ruleId":"322","severity":1,"message":"343","line":7,"column":10,"nodeType":"324","messageId":"325","endLine":7,"endColumn":16},{"ruleId":"322","severity":1,"message":"396","line":8,"column":9,"nodeType":"324","messageId":"325","endLine":8,"endColumn":16},{"ruleId":"322","severity":1,"message":"338","line":3,"column":186,"nodeType":"324","messageId":"325","endLine":3,"endColumn":193},{"ruleId":"322","severity":1,"message":"339","line":3,"column":195,"nodeType":"324","messageId":"325","endLine":3,"endColumn":209},{"ruleId":"322","severity":1,"message":"397","line":3,"column":211,"nodeType":"324","messageId":"325","endLine":3,"endColumn":225},{"ruleId":"322","severity":1,"message":"398","line":3,"column":227,"nodeType":"324","messageId":"325","endLine":3,"endColumn":240},{"ruleId":"322","severity":1,"message":"399","line":3,"column":242,"nodeType":"324","messageId":"325","endLine":3,"endColumn":254},{"ruleId":"322","severity":1,"message":"400","line":3,"column":256,"nodeType":"324","messageId":"325","endLine":3,"endColumn":274},{"ruleId":"322","severity":1,"message":"401","line":3,"column":276,"nodeType":"324","messageId":"325","endLine":3,"endColumn":287},{"ruleId":"402","severity":1,"message":"403","line":53,"column":39,"nodeType":"404","messageId":"405","endLine":53,"endColumn":41},{"ruleId":"363","severity":1,"message":"406","line":62,"column":6,"nodeType":"365","endLine":62,"endColumn":8,"suggestions":"407"},{"ruleId":"322","severity":1,"message":"408","line":7,"column":29,"nodeType":"324","messageId":"325","endLine":7,"endColumn":49},{"ruleId":"322","severity":1,"message":"409","line":7,"column":68,"nodeType":"324","messageId":"325","endLine":7,"endColumn":85},{"ruleId":"322","severity":1,"message":"410","line":17,"column":9,"nodeType":"324","messageId":"325","endLine":17,"endColumn":17},{"ruleId":"322","severity":1,"message":"357","line":29,"column":10,"nodeType":"324","messageId":"325","endLine":29,"endColumn":21},{"ruleId":"363","severity":1,"message":"411","line":44,"column":4,"nodeType":"365","endLine":44,"endColumn":6,"suggestions":"412"},{"ruleId":"363","severity":1,"message":"413","line":82,"column":6,"nodeType":"365","endLine":82,"endColumn":46,"suggestions":"414"},{"ruleId":"322","severity":1,"message":"345","line":1,"column":26,"nodeType":"324","messageId":"325","endLine":1,"endColumn":33},{"ruleId":"322","severity":1,"message":"355","line":1,"column":42,"nodeType":"324","messageId":"325","endLine":1,"endColumn":46},{"ruleId":"329","replacedBy":"415"},{"ruleId":"331","replacedBy":"416"},{"ruleId":"322","severity":1,"message":"349","line":1,"column":33,"nodeType":"324","messageId":"325","endLine":1,"endColumn":37},{"ruleId":"322","severity":1,"message":"328","line":2,"column":28,"nodeType":"324","messageId":"325","endLine":2,"endColumn":36},{"ruleId":"322","severity":1,"message":"350","line":3,"column":17,"nodeType":"324","messageId":"325","endLine":3,"endColumn":26},{"ruleId":"322","severity":1,"message":"352","line":7,"column":10,"nodeType":"324","messageId":"325","endLine":7,"endColumn":17},{"ruleId":"322","severity":1,"message":"417","line":10,"column":8,"nodeType":"324","messageId":"325","endLine":10,"endColumn":17},{"ruleId":"322","severity":1,"message":"418","line":11,"column":8,"nodeType":"324","messageId":"325","endLine":11,"endColumn":17},{"ruleId":"322","severity":1,"message":"336","line":1,"column":20,"nodeType":"324","messageId":"325","endLine":1,"endColumn":29},{"ruleId":"322","severity":1,"message":"419","line":2,"column":10,"nodeType":"324","messageId":"325","endLine":2,"endColumn":17},{"ruleId":"322","severity":1,"message":"420","line":16,"column":10,"nodeType":"324","messageId":"325","endLine":16,"endColumn":18},{"ruleId":"363","severity":1,"message":"421","line":16,"column":5,"nodeType":"365","endLine":16,"endColumn":12,"suggestions":"422"},{"ruleId":"322","severity":1,"message":"423","line":37,"column":29,"nodeType":"324","messageId":"325","endLine":37,"endColumn":38},{"ruleId":"322","severity":1,"message":"424","line":38,"column":10,"nodeType":"324","messageId":"325","endLine":38,"endColumn":19},{"ruleId":"322","severity":1,"message":"425","line":39,"column":10,"nodeType":"324","messageId":"325","endLine":39,"endColumn":15},{"ruleId":"322","severity":1,"message":"426","line":39,"column":17,"nodeType":"324","messageId":"325","endLine":39,"endColumn":25},{"ruleId":"329","replacedBy":"427"},{"ruleId":"331","replacedBy":"428"},{"ruleId":"322","severity":1,"message":"345","line":10,"column":3,"nodeType":"324","messageId":"325","endLine":10,"endColumn":10},{"ruleId":"322","severity":1,"message":"378","line":17,"column":8,"nodeType":"324","messageId":"325","endLine":17,"endColumn":16},{"ruleId":"322","severity":1,"message":"429","line":38,"column":24,"nodeType":"324","messageId":"325","endLine":38,"endColumn":36},{"ruleId":"322","severity":1,"message":"423","line":39,"column":29,"nodeType":"324","messageId":"325","endLine":39,"endColumn":38},{"ruleId":"322","severity":1,"message":"424","line":40,"column":10,"nodeType":"324","messageId":"325","endLine":40,"endColumn":19},{"ruleId":"322","severity":1,"message":"430","line":40,"column":20,"nodeType":"324","messageId":"325","endLine":40,"endColumn":22},{"ruleId":"322","severity":1,"message":"425","line":41,"column":10,"nodeType":"324","messageId":"325","endLine":41,"endColumn":15},{"ruleId":"322","severity":1,"message":"426","line":41,"column":17,"nodeType":"324","messageId":"325","endLine":41,"endColumn":25},{"ruleId":"322","severity":1,"message":"431","line":14,"column":11,"nodeType":"324","messageId":"325","endLine":14,"endColumn":17},{"ruleId":"363","severity":1,"message":"432","line":52,"column":6,"nodeType":"365","endLine":52,"endColumn":13,"suggestions":"433"},{"ruleId":"402","severity":1,"message":"403","line":23,"column":25,"nodeType":"404","messageId":"405","endLine":23,"endColumn":27},{"ruleId":"363","severity":1,"message":"434","line":32,"column":6,"nodeType":"365","endLine":32,"endColumn":8,"suggestions":"435"},"no-unused-vars","'FormHelperText' is defined but never used.","Identifier","unusedVar","'Center' is defined but never used.","'Spacer' is defined but never used.","'useState' is defined but never used.","no-native-reassign",["436"],"no-negated-in-lhs",["437"],["436"],["437"],"'FirebaseContext' is defined but never used.","'useEffect' is defined but never used.","'setUpdated' is assigned a value but never used.","'Popover' is defined but never used.","'PopoverTrigger' is defined but never used.",["436"],["437"],"'Box' is defined but never used.","'Button' is defined but never used.","'Flex' is defined but never used.","'Heading' is defined but never used.","'Albums' is defined but never used.","'SignIn' is defined but never used.","'handleSignOut' is assigned a value but never used.","'Link' is defined but never used.","'ReactLink' is defined but never used.","'useNavigate' is defined but never used.","'useAuth' is defined but never used.","'DrawerCloseButton' is defined but never used.","'Container' is defined but never used.","'Text' is defined but never used.","'Console' is defined but never used.","'currentUser' is assigned a value but never used.","'Wrap' is defined but never used.","'WrapItem' is defined but never used.","'Spinner' is defined but never used.","'useCallback' is defined but never used.","'err' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser.uid', 'firebaseFunctions', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["438"],["436"],["437"],"'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'currentUser', 'db', and 'firebaseFunctions'. Either include them or remove the dependency array.",["439"],"React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.",["440"],"React Hook useEffect has missing dependencies: 'db' and 'id'. Either include them or remove the dependency array.",["441"],"'InputRightElement' is defined but never used.","'Image' is defined but never used.","'firebase' is defined but never used.","'imageToUpload' is assigned a value but never used.","'setIsSubmitting' is assigned a value but never used.","'imagesToUpload' is assigned a value but never used.","'setImagesToUpload' is assigned a value but never used.","'uploadedImage' is assigned a value but never used.","'firestoreFunctions' is assigned a value but never used.","'preview' is assigned a value but never used.","'setPreview' is assigned a value but never used.","'previewArr' is assigned a value but never used.","'setPreviewArr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setIsUploaded'. Either include it or remove the dependency array.",["442"],["436"],["437"],"'StarIcon' is defined but never used.","'Badge' is defined but never used.","'Input' is defined but never used.","'useFire' is defined but never used.","'PopoverContent' is defined but never used.","'PopoverHeader' is defined but never used.","'PopoverArrow' is defined but never used.","'PopoverCloseButton' is defined but never used.","'PopoverBody' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'imagesInCurrentAlbum'. Either include it or remove the dependency array.",["443"],"'imagesInCurrentAlbum' is assigned a value but never used.","'setCurrentAlbumId' is assigned a value but never used.","'navigate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentAlbum', 'db', 'setCurrentAlbum', and 'slug'. Either include them or remove the dependency array.",["444"],"React Hook useEffect has missing dependencies: 'fetchImages', 'setCurrentAlbum', and 'setImagesInCurrentAlbum'. Either include them or remove the dependency array.",["445"],["436"],["437"],"'useAlbums' is defined but never used.","'ImageGrid' is defined but never used.","'boolean' is defined but never used.","'onUpload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'db' and 'storage'. Either include them or remove the dependency array.",["446"],"'isLoading' is assigned a value but never used.","'timestamp' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.",["436"],["437"],"'currentAlbum' is assigned a value but never used.","'db' is assigned a value but never used.","'shared' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchImages'. Either include it or remove the dependency array.",["447"],"React Hook useEffect has a missing dependency: 'images'. Either include it or remove the dependency array.",["448"],"no-global-assign","no-unsafe-negation",{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},"Update the dependencies array to be: [currentUser.uid, firebaseFunctions, user]",{"range":"471","text":"472"},"Update the dependencies array to be: [userLoggedIn, isUploaded, imageDeleted, created, currentUser, firebaseFunctions, db]",{"range":"473","text":"474"},"Update the dependencies array to be: [albumToShare, db]",{"range":"475","text":"476"},"Update the dependencies array to be: [db, id]",{"range":"477","text":"478"},"Update the dependencies array to be: [isSuccess, error, uploadProgress, isSubmitting, setIsUploaded]",{"range":"479","text":"480"},"Update the dependencies array to be: [imagesInCurrentAlbum]",{"range":"481","text":"482"},"Update the dependencies array to be: [currentAlbum, db, setCurrentAlbum, slug]",{"range":"483","text":"484"},"Update the dependencies array to be: [imageDeleted, isUploaded, currentAlbum, setImagesInCurrentAlbum, setCurrentAlbum, fetchImages]",{"range":"485","text":"486"},"Update the dependencies array to be: [db, image, storage]",{"range":"487","text":"488"},"Update the dependencies array to be: [album, fetchImages]",{"range":"489","text":"490"},"Update the dependencies array to be: [images]",{"range":"491","text":"492"},[1013,1015],"[currentUser.uid, firebaseFunctions, user]",[2485,2533],"[userLoggedIn, isUploaded, imageDeleted, created, currentUser, firebaseFunctions, db]",[2924,2938],"[albumToShare, db]",[658,660],"[db, id]",[3515,3563],"[isSuccess, error, uploadProgress, isSubmitting, setIsUploaded]",[2139,2141],"[imagesInCurrentAlbum]",[1461,1463],"[currentAlbum, db, setCurrentAlbum, slug]",[2249,2289],"[imageDeleted, isUploaded, currentAlbum, setImagesInCurrentAlbum, setCurrentAlbum, fetchImages]",[381,388],"[db, image, storage]",[1099,1106],"[album, fetchImages]",[1108,1110],"[images]"]